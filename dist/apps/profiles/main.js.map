{"version":3,"file":"main.js","mappings":";;;;;;;AAAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;ACAA,4CAAuC;AACvC,wCAAgE;AAChE,wCAA8C;AAC9C,4CAAoD;AACpD,qDAAwE;AACxE,mDAA6D;AAC7D,oDAAmE;AACnE,mDAAiE;AACjE,gDAAuD;AACvD,kDAA+D;AAC/D,wCAA2C;AAC3C,iDAAyD;AACzD,2DAAgF;AAYzE,IAAM,SAAS,uBAAf,MAAM,SAAS;CACrB;oBADY,SAAS;IAVrB,mBAAM,EAAC;QACP,OAAO,EAAE;YACN,kBAAU;YACZ,qBAAY,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;YAC1E,sBAAS,CAAC,YAAY,CAAC,6BAAY,GAAE,CAAC;YACpC,4BAAY;SACd;QACA,WAAW,EAAE,CAAC,oCAAgB,EAAE,iDAAsB,EAAE,kCAAe,EAAE,gCAAc,CAAC;QACzF,SAAS,EAAE,CAAC,wCAAkB,EAAE,iCAAc,EAAE,6BAAY,CAAC;KAC7D,CAAC;GACW,SAAS,CACrB;;;;;;;ACzBD;;;;;;ACAA;;;;;;ACAA;;;;;;;;;ACAA,wCAA6D;AAGtD,MAAM,YAAY,GAAG,GAA4B,EAAE,CAAC,CAAC;IAC3D,MAAM,EAAE,CAAC,sBAAa,CAAC;IACvB,OAAO,EAAE,CAAC,qBAAY,CAAC;IACvB,UAAU,EAAE,CAAC,aAA4B,EAAE,EAAE,CAAC,CAAC;QAC9C,YAAY,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;QACtD,WAAW,EAAE;YACZ;gBACC,KAAK,EAAE,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE;gBAC3C,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;gBAClD,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE;aAC9C;SACD;QACD,SAAS,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC;QAC1C,aAAa,EAAE,EAAE;QACjB,WAAW,EAAE,aAAa;KAC1B,CAAC;CACF,CAAC;AAhBW,oBAAY,gBAgBvB;;;;;;;;;;;;ACnBF,wCAKwB;AACxB,iDAA4D;AAE5D,iDAA2D;AAC3D,2CAAiD;AAEjD,yDAA2E;AAC3E,4DAAiF;AAG1E,IAAM,kBAAkB,gCAAxB,MAAM,kBAAkB;IAC7B,YAA6B,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IAOtD,KAAK,CAAC,YAAY;QAChB,IAAI,CAAC,4BAA4B;YAC/B,MAAM,IAAI,CAAC,kCAAkC,EAAE,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,kCAAkC;QACtC,MAAM,mBAAmB,GAA0B;YACjD,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,yBAAyB,EAAE;YACnD,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,yBAAyB,EAAE;SACpD,CAAC;QAEF,OAAO,OAAO,CAAC,GAAG,CAChB,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YACxC,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB;iBAClC,MAAM,CAAC;gBACN,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE;gBAC7B,MAAM,EAAE,OAAO;gBACf,MAAM,EAAE,EAAE;aACX,CAAC;iBACD,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,MAAc;QACzC,MAAM,QAAQ,GAA8B;YAC1C,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,IAAI;YACf,UAAU,EAAE;gBACV,MAAM,EAAE;oBACN,SAAS,EAAE,EAAE;oBACb,QAAQ,EAAE,EAAE;oBACZ,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,gBAAgB,EAAE;gBAChB,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;wBACjD,OAAO;4BACL,SAAS,EAAE,EAAE;4BACb,QAAQ,EAAE,KAAK;4BACf,IAAI,EAAE,EAAE;yBACmD,CAAC;oBAChE,CAAC,CAAC;oBACF,cAAc,EAAE,IAAI;iBACrB;aACF;SACF,CAAC;QAEF,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAChC,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,IAAI;aACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,EAAE;IACF,UAAU;IACV,EAAE;IAEM,KAAK,CAAC,qCAAqC,CACjD,MAAc;QAEd,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;QAEnE,MAAM,kBAAkB,GAA8B;YACpD,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,KAAK;SACjB,CAAC;QACF,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,EAAE,SAAS,EAAE,CAAC;QAC1D,IAAI,UAAU,EAAE;YACd,kBAAkB,CAAC,UAAU,GAAG;gBAC9B,MAAM,EAAE,UAAU;aACnB,CAAC;SACH;QACD,MAAM,YAAY,GAAG,cAAc,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;YACxE,OAAO;gBACL,GAAG,WAAW,CAAC,aAAa,EAAE;gBAC9B,kBAAkB,EAAE;oBAClB,OAAO,EAAE,WAAW,CAAC,kBAAkB,CAAC,SAAS,EAAE;iBACpD;aACF,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,EAAE;YAChB,kBAAkB,CAAC,gBAAgB,GAAG;gBACpC,MAAM,EAAE,YAAY;aACrB,CAAC;SACH;QACD,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAChC,MAAgC,EAChC,SAA+B,EAAE;QAEjC,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YACxD,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,0BAAiB,CAAC,gCAAgC,CAAC,CAAC;QAEhE,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,sBAAsB,CAAC,MAAgC;QACnE,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC;YACxD,KAAK,EAAE,MAAM;YACb,OAAO,EAAE;gBACP,UAAU,EAAE,IAAI;gBAChB,gBAAgB,EAAE;oBAChB,OAAO,EAAE;wBACP,kBAAkB,EAAE,IAAI;qBACzB;iBACF;aACF;SACF,CAAC,CAAC;QACH,IAAI,CAAC,aAAa;YAChB,MAAM,IAAI,0BAAiB,CAAC,gCAAgC,CAAC,CAAC;QAEhE,OAAO,IAAI,8BAAa,CAAC,aAAa,CAAC,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,MAAc;QAC3C,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,MAAc;QACvC,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QACnD,MAAM,MAAM,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;QAC5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChE,OAAO,OAAO,CAAC,EAAE,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,SAAiB;QAC3C,MAAM,MAAM,GAAG,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,MAAc;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YACjD,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;YACpB,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE;SAC1B,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qCAAqC,CACzE,MAAM,CACP,CAAC;QAEF,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAChC,IAAI,EAAE,kBAAkB;YACxB,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,IAAI;aACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAAiB;QACvC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE;gBACL,EAAE,EAAE,SAAS;aACd;YACD,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,MAAM,EAAE,IAAI;aACb;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,SAAiB,EAAE,OAAsB;QAC/D,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAChC,KAAK,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE;YACxB,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE;YAC7B,MAAM,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;SACnC,CAAC,CAAC;IACL,CAAC;IAED,EAAE;IACF,aAAa;IACb,EAAE;IAEM,KAAK,CAAC,qBAAqB,CACjC,KAAwC,EACxC,UAA4B;QAE5B,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE,KAAK;YACZ,IAAI,EAAE,UAAU,CAAC,SAAS,EAAE;YAC5B,MAAM,EAAE;gBACN,EAAE,EAAE,IAAI;gBACR,SAAS,EAAE,IAAI;aAChB;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,2BAA2B,CAC/B,SAAiB,EACjB,UAA4B;QAE5B,OAAO,IAAI,CAAC,qBAAqB,CAC/B;YACE,SAAS,EAAE,SAAS;SACrB,EACD,UAAU,CACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,EAAU,EAAE,UAA4B;QACjE,OAAO,IAAI,CAAC,qBAAqB,CAC/B;YACE,EAAE,EAAE,EAAE;SACP,EACD,UAAU,CACX,CAAC;IACJ,CAAC;IAED,EAAE;IACF,gBAAgB;IAChB,EAAE;IAEM,KAAK,CAAC,uCAAuC,CACnD,SAAiB,EACjB,gBAAyC;QAEzC,MAAM,eAAe,GACnB,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;YAC7C,IAAI,CAAC,SAAS;gBAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC5D,OAAO;gBACL,GAAG,IAAI,CAAC,aAAa,EAAE;gBACvB,SAAS,EAAE,SAAS;gBACpB,SAAS,EAAE,SAAS;aACrB,CAAC;QACJ,CAAC,CAAC,CAAC;QACL,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,qCAAqC,CAAC,SAAiB;QAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;YACzD,KAAK,EAAE;gBACL,SAAS,EAAE,SAAS;aACrB;YACD,OAAO,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE;SACtC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,OAAO,IAAI,8CAAqB,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,2CAA2C,CAAC,SAAiB;QACjE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;YACzD,KAAK,EAAE;gBACL,SAAS,EAAE,SAAS;aACrB;YACD,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE;SAC7C,CAAC,CAAC;QACH,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,kBAA4B;QAC5D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC;YACzD,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,kBAAkB,EAAE,EAAE;YACzC,OAAO,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE;SACtC,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,8CAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;IAChE,CAAC;IAEO,KAAK,CAAC,+BAA+B,CAC3C,eAAwD;QAExD,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC;YAC5C,IAAI,EAAE,eAAe;YACrB,cAAc,EAAE,IAAI;SACrB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,SAAiB;QACnD,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC;YAC5C,KAAK,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;SAChC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB,CACtB,SAAiB,EACjB,gBAAyC;QAEzC,IAAI;YACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,uCAAuC,CACpE,SAAS,EACT,gBAAgB,CACjB,CAAC;YACF,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,SAAS,CAAC,CAAC;YACzE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAC7D,WAAW,CACZ,CAAC;YACF,OAAO,YAAY,CAAC;SACrB;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,YAAY,KAAK;gBAAE,MAAM,IAAI,4BAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YACjE,MAAM,IAAI,4BAAmB,EAAE,CAAC;SACjC;IACH,CAAC;IAED,EAAE;IACF,yBAAyB;IACzB,EAAE;IAEM,KAAK,CAAC,sCAAsC,CAClD,KAAe,EACf,SAAiD,IAAI;QAErD,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC;YAC7C,MAAM,EAAE,MAAM;YACd,KAAK,EAAE;gBACL,IAAI,EAAE;oBACJ,EAAE,EAAE,KAAK;iBACV;aACF;YACD,OAAO,EAAE;gBACP,IAAI,EAAE,iBAAM,CAAC,SAAS,CAAC,GAAG;aAC3B;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,uCAAuC,CAAC,KAAe;QAC3D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE;YACvE,EAAE,EAAE,IAAI;SACT,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,yCAAyC,CAAC,KAAe;QAC7D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sCAAsC,CAAC,KAAK,EAAE;YACvE,EAAE,EAAE,IAAI;SACT,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,qCAAqC,CAAC,KAAe;QACzD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,sCAAsC,CAAC,KAAK,CAAC,CAAC;QACzE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,OAAO,IAAI,oDAAwB,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,QAAoC;QAClE,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC;YAC/C,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YACpD,cAAc,EAAE,IAAI;SACrB,CAAC,CAAC;IACL,CAAC;IAED,EAAE;IACF,UAAU;IACV,EAAE;IAEF,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC;YACzD,KAAK,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;SAChC,CAAC,CAAC;QACH,OAAO,CAAC,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,KAAK,CAAC,gCAAgC,CAAC,MAAc;QACnD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC;YACvD,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;SAC5B,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC/C,CAAC;CACF;6BAlYY,kBAAkB;IAD9B,uBAAU,GAAE;iEAE0B,8BAAa,oBAAb,8BAAa;GADvC,kBAAkB,CAkY9B;;;;;;;;;;;;ACjZD,wCAKwB;AACxB,2CAA+D;AAGxD,IAAM,aAAa,6CAAnB,MAAM,aACX,SAAQ,uBAAyD;IAKjE;QACE,KAAK,CAAC;YACJ,GAAG,EAAE;gBACH;oBACE,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,OAAO;iBACf;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,OAAO;iBACf;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,MAAM;iBACd;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,MAAM;iBACd;aACF;SACF,CAAC,CAAC;QAtBY,WAAM,GAAG,IAAI,eAAM,CAAC,eAAa,CAAC,IAAI,CAAC,CAAC;IAuBzD,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;QAEtB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YAChC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;YACtC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,KAAK,MAAM,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;IAC3B,CAAC;CACF;wBAjDY,aAAa;IADzB,uBAAU,GAAE;;GACA,aAAa,CAiDzB;;;;;;;AC1DD;;;;;;;;;ACKA,oDAAuD;AACvD,yDAAiE;AAEjE,MAAa,aAAa;IAMxB,YAAY,OAAiB;QAC3B,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;YACpE,OAAO,IAAI,8CAAqB,CAAC,WAAW,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,CAAC,UAAU;YACpB,IAAI,CAAC,UAAU,GAAG,IAAI,oCAAgB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAC/D,CAAC;IAEM,aAAa;QAClB,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;IAEM,eAAe;QACpB,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE,CACjE,iBAAiB,CAAC,eAAe,EAAE,CACpC;YACD,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,EAAE;SACzC,CAAC;IACJ,CAAC;IAEM,qBAAqB;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,oBAAoB;QACzB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAvCD,sCAuCC;;;;;;;;;;AC7CD,MAAa,gBAAgB;IAO3B,YAAY,UAAuB;QACjC,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QACtC,IAAI,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;IACtC,CAAC;IAEM,SAAS;QACd,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;SACxB,CAAC;IACJ,CAAC;CACF;AAtBD,4CAsBC;;;;;;;;;;AClBD,4DAAuE;AAEvE,MAAa,qBAAqB;IAOhC,YAAY,WAA6B;QACvC,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,EAAE,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,kBAAkB,GAAG,IAAI,oDAAwB,CACpD,WAAW,CAAC,kBAAkB,CAC/B,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;IAEM,aAAa;QAIlB,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;IAEM,eAAe;QACpB,OAAO;YACL,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE;YACvD,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;CACF;AAlCD,sDAkCC;;;;;;;;;;ACrCD,MAAa,wBAAwB;IAKnC,YAAY,kBAAuC;QACjD,IAAI,CAAC,EAAE,GAAG,kBAAkB,CAAC,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC;IACtC,CAAC;IAEM,SAAS;QACd,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;CACF;AAjBD,4DAiBC;;;;;;;;;;;;ACtBD,wCAOwB;AAExB,qDAAyE;AASzE,mDAGsC;AACtC,oFAAoF;AAG7E,IAAM,cAAc,4BAApB,MAAM,cAAc;IACzB,YAA6B,kBAAsC;QAAtC,uBAAkB,GAAlB,kBAAkB,CAAoB;IAAG,CAAC;IAEvE,KAAK,CAAC,sBAAsB,CAAC,MAAc;QACzC,OAAO,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,MAAc;QAChC,OAAO,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB,EAAE,OAAsB;QAC3D,IAAI,OAAO,CAAC,gBAAgB,EAAE;YAC5B,MAAM,IAAI,CAAC,sBAAsB,CAAC,SAAS,EAAE,OAAO,CAAC,gBAAgB,CAAC,CAAC;SACxE;QACD,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;SAC5D;QACD,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CACzE,SAAS,EACT,OAAO,CACR,CAAC;QACF,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,SAAiB,EAAE,UAA4B;QACpE,OAAO,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,CACxD,SAAS,EACT,UAAU,CACX,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,+CAA+C,CACnD,gBAAyC;QAEzC,MAAM,YAAY,GAAG,MAAM,sDAA+B,EACxD,gBAAgB,CACjB,CAAC;QACF,MAAM,cAAc,GAClB,MAAM,IAAI,CAAC,kBAAkB,CAAC,qCAAqC,CACjE,YAAY,CACb,CAAC;QACJ,gBAAgB,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAChC,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CACvC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAC3D,CAAC;YACF,IAAI,CAAC,aAAa;gBAAE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACpE,IAAI,CAAC,kBAAkB,GAAG,aAAa,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,sBAAsB,CAC1B,SAAiB,EACjB,gBAAyC;QAEzC,MAAM,QAAQ,GAAG,MAAM,iDAA0B,EAAC,gBAAgB,CAAC,CAAC;QACpE,MAAM,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAChD,MAAM,IAAI,CAAC,+CAA+C,CACxD,gBAAgB,CACjB,CAAC;QAEF,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAC/C,SAAS,EACT,gBAAgB,CACjB,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,QAAoC;QACnE,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtD,MAAM,YAAY,GAChB,MAAM,IAAI,CAAC,kBAAkB,CAAC,yCAAyC,CACrE,KAAK,CACN,CAAC;QACJ,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAChC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAClD,CAAC;QACF,kBAAkB;QAClB,mEAAmE;QACnE,OAAO,IAAI,CAAC,kBAAkB,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;IACvE,CAAC;IAED,EAAE;IACF,UAAU;IACV,EAAE;IAEF,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,SAAiB,EAAE,MAAc;QACpE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACvD,IAAI,QAAQ;YAAE,OAAO,IAAI,CAAC;QAE1B,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAClF,IAAI,aAAa;YAAE,OAAO,IAAI,CAAC;QAE/B,MAAM,IAAI,8BAAqB,EAAE,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,6BAA6B,CAAC,MAAc,EAAE,SAAiB;QACnE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CACjE,SAAS,CACV,CAAC;QACF,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM;YAAE,MAAM,IAAI,8BAAqB,EAAE,CAAC;QACjE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,MAAc;QACtC,OAAO,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;IAC9D,CAAC;CACF;yBA9GY,cAAc;IAD1B,uBAAU,GAAE;iEAEsC,wCAAkB,oBAAlB,wCAAkB;GADxD,cAAc,CA8G1B;;;;;;;;;;ACrID,EAAE;AACF,oBAAoB;AACpB,EAAE;AAEK,KAAK,UAAU,iCAAiC,CACrD,gBAAyC;IAEzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACnC,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC;AAND,8EAMC;AAEM,KAAK,UAAU,mCAAmC,CACvD,gBAAyC;IAEzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACnC,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;AACL,CAAC;AAND,kFAMC;AAED,EAAE;AACF,uBAAuB;AACvB,EAAE;AAEK,KAAK,UAAU,0BAA0B,CAC9C,gBAAyC;IAEzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACnC,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC;AAND,gEAMC;AAEM,KAAK,UAAU,gCAAgC,CACpD,gBAAyC;IAEzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACnC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC;IAC7C,CAAC,CAAC,CAAC;AACL,CAAC;AAND,4EAMC;AAEM,KAAK,UAAU,+BAA+B,CACnD,gBAAyC;IAEzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACnC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AAND,0EAMC;;;;;;;;;;;;AChDD,wCAAyE;AACzE,4CAAmD;AACnD,4CAOsD;AACtD,qDAAyE;AACzE,mDAA8D;AAC9D,iDAA2D;AAIpD,IAAM,gBAAgB,8BAAtB,MAAM,gBAAgB;IAC3B,YACmB,cAA8B,EAC9B,iBAAqC;QADrC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAItD,KAAD,CAAC,aAAa,CACT,EAAE,MAAM,EAA4B;QAE5C,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;IAIK,KAAD,CAAC,aAAa,CACT,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAyB;QAE7D,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,cAAc,CAAC,6BAA6B,CACrD,MAAM,EACN,SAAS,CACV,CAAC;QACJ,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,8BAAqB,EAAE,CAAC;QAExD,MAAM,aAAa,GAAG,IAAI,8BAAa,CAAC,OAAO,CAAC,CAAC;QACjD,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9B,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IAIK,KAAD,CAAC,oBAAoB,CAChB,EAAE,MAAM,EAAE,OAAO,EAAgC;QAEzD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACxE,MAAM,aAAa,GAAG,IAAI,8BAAa,CAAC,OAAO,CAAC,CAAC;QACjD,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC;QAC9B,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IACrE,CAAC;IAKK,KAAD,CAAC,aAAa,CACT,EAAE,MAAM,EAAE,SAAS,EAA4B;QAEvD,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,cAAc,CAAC,6BAA6B,CACrD,MAAM,EACN,SAAS,CACV,CAAC;QACJ,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,8BAAqB,EAAE,CAAC;QAExD,OAAO,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IAC7D,CAAC;CACF;AAjDO;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,4BAAgB,CAAC,KAAK,CAAC;IAE9B,oCAAI,GAAE;;iEAAa,4BAAgB,oBAAhB,4BAAgB,CAAC,OAAO;gEAC3C,OAAO,oBAAP,OAAO;qDAET;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,yBAAa,CAAC,KAAK,CAAC;IAE3B,oCAAI,GAAE;;iEAAiC,yBAAa,oBAAb,yBAAa,CAAC,OAAO;gEAC5D,OAAO,oBAAP,OAAO;qDAWT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,gCAAoB,CAAC,KAAK,CAAC;IAElC,oCAAI,GAAE;;iEAAsB,gCAAoB,oBAApB,gCAAoB,CAAC,OAAO;gEACxD,OAAO,oBAAP,OAAO;4DAKT;AAKK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,4BAAgB,CAAC,KAAK,CAAC;IAE9B,oCAAI,GAAE;;iEAAwB,4BAAgB,oBAAhB,4BAAgB,CAAC,OAAO;gEACtD,OAAO,oBAAP,OAAO;qDAST;2BAvDU,gBAAgB;IAD5B,uBAAU,GAAE;iEAGwB,iCAAc,oBAAd,iCAAc,oDACX,wCAAkB,oBAAlB,wCAAkB;GAH7C,gBAAgB,CAwD5B;;;;;;;;;;ACxED,EAAE;AACF,WAAW;AACX,EAAE;AACF,uDAA4C;AAC5C,uDAA+C;AAC/C,uDAAuD;AACvD,uDAAsD;AACtD,uDAAyD;AAEzD,EAAE;AACF,WAAW;AACX,EAAE;AACF,uDAA6C;AAC7C,uDAA6C;AAC7C,uDAA6C;AAC7C,uDAAoD;AACpD,uDAAqD;AACrD,uDAA4D;AAC5D,uDAA8D;AAE9D,uDAA+D;AAC/D,uDAAuE;AACvE,uDAAuE;AACvE,uDAA+E;;;;;;;;;;;ACvB/E,kDAAoD;AAEpD,IAAiB,YAAY,CAc5B;AAdD,WAAiB,YAAY;IACf,kBAAK,GAAG,uBAAuB,CAAC;IAE7C,MAAa,OAAO;KAMnB;IAJA;QADC,6BAAO,GAAE;;0CACI;IAGd;QADC,8BAAQ,GAAE;;6CACM;IALL,oBAAO,UAMnB;IAED,MAAa,QAAQ;KAEpB;IAFY,qBAAQ,WAEpB;AACF,CAAC,EAdgB,YAAY,4BAAZ,YAAY,QAc5B;;;;;;;AChBD;;;;;;;;;;ACAA,kDAAoD;AAEpD,IAAiB,eAAe,CAc/B;AAdD,WAAiB,eAAe;IACjB,qBAAK,GAAG,0BAA0B,CAAC;IAEhD,MAAa,OAAO;KAMnB;IAJC;QADC,6BAAO,GAAE;;0CACI;IAGd;QADC,8BAAQ,GAAE;;6CACM;IALN,uBAAO,UAMnB;IAED,MAAa,QAAQ;KAEpB;IAFY,wBAAQ,WAEpB;AACH,CAAC,EAdgB,eAAe,+BAAf,eAAe,QAc/B;;;;;;;;;;;ACfD,kDAA2C;AAE3C,IAAiB,qBAAqB,CAWrC;AAXD,WAAiB,qBAAqB;IACxB,2BAAK,GAAG,kCAAkC,CAAC;IAExD,MAAa,OAAO;KAKnB;IAHA;QADC,8BAAQ,GAAE;;uCACA;IAFC,6BAAO,UAKnB;IAED,MAAa,QAAQ;KAAG;IAAX,8BAAQ,WAAG;AACzB,CAAC,EAXgB,qBAAqB,qCAArB,qBAAqB,QAWrC;;;;;;;;;;;ACbD,kDAA2C;AAE3C,IAAiB,oBAAoB,CAWpC;AAXD,WAAiB,oBAAoB;IACvB,0BAAK,GAAG,yBAAyB,CAAC;IAE/C,MAAa,OAAO;KAGnB;IADA;QADC,8BAAQ,GAAE;;2CACI;IAFH,4BAAO,UAGnB;IAED,MAAa,QAAQ;KAEpB;IAFY,6BAAQ,WAEpB;AACF,CAAC,EAXgB,oBAAoB,oCAApB,oBAAoB,QAWpC;;;;;;;;;;;ACbD,kDAAoD;AAEpD,IAAiB,uBAAuB,CAOvC;AAPD,WAAiB,uBAAuB;IACzB,6BAAK,GAAG,4BAA4B,CAAC;IAElD,MAAa,OAAO;KAGnB;IADC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,+BAAO,UAGnB;AACH,CAAC,EAPgB,uBAAuB,uCAAvB,uBAAuB,QAOvC;;;;;;;;;;;ACTD,kDAA2C;AAE3C,IAAiB,gBAAgB,CAYhC;AAZD,WAAiB,gBAAgB;IAClB,sBAAK,GAAG,qCAAqC,CAAC;IAE3D,MAAa,OAAO;KAGnB;IADC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,wBAAO,UAGnB;IAED,MAAa,QAAQ;KAGpB;IAHY,yBAAQ,WAGpB;AACH,CAAC,EAZgB,gBAAgB,gCAAhB,gBAAgB,QAYhC;;;;;;;;;;;ACdD,kDAA2C;AAE3C,IAAiB,gBAAgB,CAehC;AAfD,WAAiB,gBAAgB;IAClB,sBAAK,GAAG,qCAAqC,CAAC;IAE3D,MAAa,OAAO;KAMnB;IAJC;QADC,8BAAQ,GAAE;;2CACI;IAGf;QADC,8BAAQ,GAAE;;8CACO;IALP,wBAAO,UAMnB;IAED,MAAa,QAAQ;KAGpB;IAHY,yBAAQ,WAGpB;AACH,CAAC,EAfgB,gBAAgB,gCAAhB,gBAAgB,QAehC;;;;;;;;;;;ACjBD,kDAA2C;AAE3C,IAAiB,aAAa,CAiB7B;AAjBD,WAAiB,aAAa;IACf,mBAAK,GAAG,qCAAqC,CAAC;IAE3D,MAAa,OAAO;KAQnB;IANC;QADC,8BAAQ,GAAE;;2CACI;IAGf;QADC,8BAAQ,GAAE;;8CACO;IALP,qBAAO,UAQnB;IAED,MAAa,QAAQ;KAGpB;IAHY,sBAAQ,WAGpB;AACH,CAAC,EAjBgB,aAAa,6BAAb,aAAa,QAiB7B;;;;;;;;;;;ACnBD,kDAA2C;AAE3C,IAAiB,YAAY,CAc5B;AAdD,WAAiB,YAAY;IACf,kBAAK,GAAG,4BAA4B,CAAC;IAElD,MAAa,OAAO;KAMnB;IAJA;QADC,8BAAQ,GAAE;;2CACI;IAGb;QADC,8BAAQ,GAAE;;8CACO;IALR,oBAAO,UAMnB;IAED,MAAa,QAAQ;KAEpB;IAFY,qBAAQ,WAEpB;AACF,CAAC,EAdgB,YAAY,4BAAZ,YAAY,QAc5B;;;;;;;;;;;AChBD,kDAA2C;AAE3C,IAAiB,oBAAoB,CAapC;AAbD,WAAiB,oBAAoB;IACtB,0BAAK,GAAG,6CAA6C,CAAC;IAEnE,MAAa,OAAO;KAKnB;IAHC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,4BAAO,UAKnB;IAED,MAAa,QAAQ;KAEpB;IAFY,6BAAQ,WAEpB;AACH,CAAC,EAbgB,oBAAoB,oCAApB,oBAAoB,QAapC;;;;;;;;;;;ACfD,kDAA2C;AAE3C,IAAiB,mBAAmB,CAWnC;AAXD,WAAiB,mBAAmB;IACtB,yBAAK,GAAG,oCAAoC,CAAC;IAE1D,MAAa,OAAO;KAGnB;IADA;QADC,8BAAQ,GAAE;;2CACI;IAFH,2BAAO,UAGnB;IAED,MAAa,QAAQ;KAEpB;IAFY,4BAAQ,WAEpB;AACF,CAAC,EAXgB,mBAAmB,mCAAnB,mBAAmB,QAWnC;;;;;;;;;;;ACbD,kDAA2C;AAE3C,IAAiB,2BAA2B,CAW3C;AAXD,WAAiB,2BAA2B;IAC7B,iCAAK,GAAG,iCAAiC,CAAC;IAEvD,MAAa,OAAO;KAGnB;IADC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,mCAAO,UAGnB;IAED,MAAa,QAAQ;KAEpB;IAFY,oCAAQ,WAEpB;AACH,CAAC,EAXgB,2BAA2B,2CAA3B,2BAA2B,QAW3C;;;;;;;;;;;ACXD,kDAA2C;AAE3C,IAAiB,uBAAuB,CAiBvC;AAjBD,WAAiB,uBAAuB;IACzB,6BAAK,GAAG,2CAA2C,CAAC;IAEjE,MAAa,OAAO;KAQnB;IANC;QADC,8BAAQ,GAAE;;8CACO;IAGlB;QADC,8BAAQ,GAAE;;2CACI;IALJ,+BAAO,UAQnB;IAED,MAAa,QAAQ;KAGpB;IAHY,gCAAQ,WAGpB;AACH,CAAC,EAjBgB,uBAAuB,uCAAvB,uBAAuB,QAiBvC;;;;;;;;;;;AClBD,kDAA2C;AAE3C,IAAiB,8BAA8B,CAc9C;AAdD,WAAiB,8BAA8B;IAChC,oCAAK,GAAG,mDAAmD,CAAC;IAEzE,MAAa,OAAO;KAKnB;IAHC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,sCAAO,UAKnB;IAED,MAAa,QAAQ;KAGpB;IAHY,uCAAQ,WAGpB;AACH,CAAC,EAdgB,8BAA8B,8CAA9B,8BAA8B,QAc9C;;;;;;;;;;;ACjBD,kDAA2C;AAE3C,IAAiB,6BAA6B,CAgB7C;AAhBD,WAAiB,6BAA6B;IAC/B,mCAAK,GAAG,2CAA2C,CAAC;IAEjE,MAAa,OAAO;KAQnB;IANC;QADC,8BAAQ,GAAE;;8CACO;IAGlB;QADC,8BAAQ,GAAE;;2CACI;IALJ,qCAAO,UAQnB;IAED,MAAa,QAAQ;KAEpB;IAFY,sCAAQ,WAEpB;AACH,CAAC,EAhBgB,6BAA6B,6CAA7B,6BAA6B,QAgB7C;;;;;;;;;;;AClBD,kDAA2C;AAE3C,IAAiB,oCAAoC,CAapD;AAbD,WAAiB,oCAAoC;IACtC,0CAAK,GAAG,mDAAmD,CAAC;IAEzE,MAAa,OAAO;KAKnB;IAHC;QADC,8BAAQ,GAAE;;2CACI;IAFJ,4CAAO,UAKnB;IAED,MAAa,QAAQ;KAEpB;IAFY,6CAAQ,WAEpB;AACH,CAAC,EAbgB,oCAAoC,oDAApC,oCAAoC,QAapD;;;;;;;;;;;;AClBD,wCAAkD;AAClD,4CAAmD;AACnD,4CAIsD;AAEtD,qDAAyE;AACzE,mDAA8D;AAE9D,gBAAgB;AAChB,QAAQ;AACR,qBAAqB;AAGd,IAAM,eAAe,6BAArB,MAAM,eAAe;IAC1B,YACmB,iBAAqC,EACrC,cAA8B;QAD9B,sBAAiB,GAAjB,iBAAiB,CAAoB;QACrC,mBAAc,GAAd,cAAc,CAAgB;IAC9C,CAAC;IAIE,KAAD,CAAC,iBAAiB,CACb,EAAE,MAAM,EAA+B;QAE/C,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CACzE,MAAM,CACP,CAAC;QACF,OAAO;YACL,OAAO,EAAE,aAAa;SACvB,CAAC;IACJ,CAAC;IAIK,KAAD,CAAC,UAAU,CACN,EAAE,MAAM,EAAE,SAAS,EAAwB;QAEnD,MAAM,IAAI,CAAC,cAAc,CAAC,8BAA8B,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC5E,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CACtE,SAAS,CACV,CAAC;QACF,OAAO;YACL,OAAO,EAAE,aAAa;SACvB,CAAC;IACJ,CAAC;IAIK,KAAD,CAAC,qBAAqB,CACjB,EAAE,MAAM,EAAuC;QAEvD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;QAC5E,OAAO;YACL,UAAU,EAAE,GAAG;SAChB;IACH,CAAC;CACF;AAnCO;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,+BAAmB,CAAC,KAAK,CAAC;IAEjC,oCAAI,GAAE;;iEAAa,+BAAmB,oBAAnB,+BAAmB,CAAC,OAAO;gEAC9C,OAAO,oBAAP,OAAO;wDAOT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,wBAAY,CAAC,KAAK,CAAC;IAE1B,oCAAI,GAAE;;iEAAwB,wBAAY,oBAAZ,wBAAY,CAAC,OAAO;gEAClD,OAAO,oBAAP,OAAO;iDAQT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,uCAA2B,CAAC,KAAK,CAAC;IAEzC,oCAAI,GAAE;;iEAAa,uCAA2B,oBAA3B,uCAA2B,CAAC,OAAO;gEACtD,OAAO,oBAAP,OAAO;4DAKT;0BA1CU,eAAe;IAD3B,uBAAU,GAAE;iEAG2B,wCAAkB,oBAAlB,wCAAkB,oDACrB,iCAAc,oBAAd,iCAAc;GAHtC,eAAe,CA2C3B;;;;;;;;;;;AC3DD,wCAAwC;AACxC,iDAAiD;AAQ1C,IAAM,YAAY,0BAAlB,MAAM,YAAY;CAAG;uBAAf,YAAY;IANxB,mBAAM,EAAC;QACN,OAAO,EAAE,EAAE;QACX,WAAW,EAAE,EAAE;QACf,SAAS,EAAE,CAAC,8BAAa,CAAC;QAC1B,OAAO,EAAE,CAAC,8BAAa,CAAC;KACzB,CAAC;GACW,YAAY,CAAG;;;;;;;;;;;;ACT5B,wCAAkD;AAClD,4CAAmD;AACnD,4CAIsD;AACtD,mDAA8D;AAGvD,IAAM,cAAc,4BAApB,MAAM,cAAc;IACzB,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAIzD,KAAD,CAAC,WAAW,CACP,EAAE,MAAM,EAAmC;QAErD,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC;CACF;AALO;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,mCAAuB,CAAC,KAAK,CAAC;IAErC,oCAAI,GAAE;;iEAAa,mCAAuB,oBAAvB,mCAAuB,CAAC,OAAO;;iDAGpD;yBATU,cAAc;IAD1B,uBAAU,GAAE;iEAEkC,iCAAc,oBAAd,iCAAc;GADhD,cAAc,CAU1B;;;;;;;ACpBD;;;;;;;;;;;ACAA,wCAAgG;AAKhG,wCAA4C;AAC5C,oFAAoF;AAG7E,IAAM,YAAY,0BAAlB,MAAM,YAAY;IACvB,YACmB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IACxC,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,IAAY;QAC5B,8BAA8B;QAC9B,MAAM,IAAI,gCAAuB,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,2BAA2B,CAAC,QAAoC;QACpE,MAAM,IAAI,gCAAuB,EAAE,CAAC;QACpC,KAAI,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC7B,OAAO,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACxD;IACH,CAAC;CACF;uBAhBY,YAAY;IADxB,uBAAU,GAAE;iEAGqB,mBAAW,oBAAX,mBAAW;GAFhC,YAAY,CAgBxB;;;;;;;;;;;;ACzBD,wCAAyE;AACzE,4CAAmD;AACnD,mDAA8D;AAE9D,oDAAiE;AACjE,4CAKsD;AACtD,yDAA2E;AAGpE,IAAM,sBAAsB,oCAA5B,MAAM,sBAAsB;IACjC,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAIzD,KAAD,CAAC,gBAAgB,CACZ,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAmC;QAE1E,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,cAAc,CAAC,6BAA6B,CACrD,MAAM,EACN,SAAS,CACV,CAAC;QACJ,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,8BAAqB,EAAE,CAAC;QAExD,MAAM,gBAAgB,GAAG,IAAI,oCAAgB,CAAC,UAAU,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAC3E,CAAC;IAIK,KAAD,CAAC,uBAAuB,CACnB,EAAE,MAAM,EAAE,UAAU,EAA0C;QAEtE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACxE,MAAM,gBAAgB,GAAG,IAAI,oCAAgB,CAAC,UAAU,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAC3E,CAAC;IAIK,KAAD,CAAC,sBAAsB,CAE1B,EACE,SAAS,EACT,MAAM,EACN,gBAAgB,GACsB;QAExC,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,cAAc,CAAC,6BAA6B,CACrD,MAAM,EACN,SAAS,CACV,CAAC;QACJ,IAAI,CAAC,eAAe;YAAE,MAAM,IAAI,8BAAqB,EAAE,CAAC;QAExD,MAAM,wBAAwB,GAAG,gBAAgB,CAAC,GAAG,CACnD,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,8CAAqB,CAAC,IAAI,CAAC,CAC1C,CAAC;QACF,OAAO,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;IACzF,CAAC;IAIK,KAAD,CAAC,6BAA6B,CACzB,EAAE,MAAM,EAAE,gBAAgB,EAAgD;QAElF,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACxE,MAAM,wBAAwB,GAAG,gBAAgB,CAAC,GAAG,CACnD,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,8CAAqB,CAAC,IAAI,CAAC,CAC1C,CAAC;QACF,OAAO,IAAI,CAAC,cAAc,CAAC,sBAAsB,CAAC,SAAS,EAAE,wBAAwB,CAAC,CAAC;IACzF,CAAC;CACF;AA1DO;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,mCAAuB,CAAC,KAAK,CAAC;IAErC,oCAAI,GAAE;;iEAAoC,mCAAuB,oBAAvB,mCAAuB,CAAC,OAAO;gEACzE,OAAO,oBAAP,OAAO;8DAUT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,0CAA8B,CAAC,KAAK,CAAC;IAE5C,oCAAI,GAAE;;iEAAyB,0CAA8B,oBAA9B,0CAA8B,CAAC,OAAO;gEACrE,OAAO,oBAAP,OAAO;qEAIT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,yCAA6B,CAAC,KAAK,CAAC;IAE3C,oCAAI,GAAE;;iEAKJ,yCAA6B,oBAA7B,yCAA6B,CAAC,OAAO;gEACvC,OAAO,oBAAP,OAAO;oEAYT;AAIK;IAFL,4BAAW,GAAE;IACb,yBAAQ,EAAC,gDAAoC,CAAC,KAAK,CAAC;IAElD,oCAAI,GAAE;;iEAA+B,gDAAoC,oBAApC,gDAAoC,CAAC,OAAO;gEACjF,OAAO,oBAAP,OAAO;2EAMT;iCA9DU,sBAAsB;IADlC,uBAAU,GAAE;iEAEkC,iCAAc,oBAAd,iCAAc;GADhD,sBAAsB,CA+DlC;;;;;;UC7ED;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,uBAAsB;AACtB,wCAAwC;AACxC,sCAA2C;AAC3C,4CAA6C;AAE7C,KAAK,UAAU,SAAS;IACvB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAChD,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;IACjB,eAAM,CAAC,GAAG,CACT,qCAAqC,CACrC,CAAC;AACH,CAAC;AAED,SAAS,EAAE,CAAC","sources":["webpack:///external commonjs \"dotenv/config\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"nestjs-rmq\"","webpack:///external commonjs \"@nestjs/config\"","webpack:///./src/app/configs/rmq.config.ts","webpack:///./src/app/repositories/profiles.repository.ts","webpack:///./src/prisma/prisma.service.ts","webpack:///external commonjs \"@prisma/client/profiles\"","webpack:///./src/app/entities/profile.entity.ts","webpack:///./src/app/entities/credential.entity.ts","webpack:///./src/app/entities/socialMediaNode.entity.ts","webpack:///./src/app/entities/socialMediaVariant.entity.ts","webpack:///./src/app/services/porfiles.service.ts","webpack:///./src/app/entities/entities.utility.ts","webpack:///./src/app/controllers/profiles.commands.ts","webpack:///../../libs/contracts/src/index.ts","webpack:///../../libs/contracts/src/lib/account/account.login.ts","webpack:///external commonjs \"class-validator\"","webpack:///../../libs/contracts/src/lib/account/account.register.ts","webpack:///../../libs/contracts/src/lib/account/account.change-user-info.ts","webpack:///../../libs/contracts/src/lib/account/account.query-user-info.ts","webpack:///../../libs/contracts/src/lib/account/account.user-created.event.ts","webpack:///../../libs/contracts/src/lib/profile/profile.create.ts","webpack:///../../libs/contracts/src/lib/profile/profile.delete.ts","webpack:///../../libs/contracts/src/lib/profile/profile.change.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-profile.ts","webpack:///../../libs/contracts/src/lib/profile/profile.change-default.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-profile-default.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-user-profiles-ids.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-credential.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-credential-default.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-social-media-nodes.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-social-media-nodes-default.ts","webpack:///./src/app/controllers/profiles.queries.ts","webpack:///./src/prisma/prisma.module.ts","webpack:///./src/app/controllers/profiles.events.ts","webpack:///external commonjs \"@nestjs/axios\"","webpack:///./src/app/services/icons8.service.ts","webpack:///./src/app/controllers/profiles-nested.commands.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"dotenv/config\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { RMQModule } from 'nestjs-rmq';\nimport { Module, OnApplicationBootstrap } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { getRMQConfig } from './configs/rmq.config';\nimport { ProfilesRepository } from './repositories/profiles.repository';\nimport { ProfileService } from './services/porfiles.service';\nimport { ProfilesCommands } from './controllers/profiles.commands';\nimport { ProfilesQueries } from './controllers/profiles.queries';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { ProfilesEvents } from './controllers/profiles.events';\nimport { HttpModule } from '@nestjs/axios';\nimport { IconsService } from './services/icons8.service';\nimport { ProfilesNestedCommands } from './controllers/profiles-nested.commands';\n\n@Module({\n\timports: [\n    HttpModule,\n\t\tConfigModule.forRoot({ isGlobal: true, envFilePath: 'envs/.profile.env' }),\n\t\tRMQModule.forRootAsync(getRMQConfig()),\n    PrismaModule\n\t],\n  controllers: [ProfilesCommands, ProfilesNestedCommands, ProfilesQueries, ProfilesEvents],\n\tproviders: [ProfilesRepository, ProfileService, IconsService],\n})\nexport class AppModule {\n}\n","module.exports = require(\"tslib\");","module.exports = require(\"nestjs-rmq\");","module.exports = require(\"@nestjs/config\");","import { ConfigModule, ConfigService } from '@nestjs/config';\r\nimport { IRMQServiceAsyncOptions } from 'nestjs-rmq';\r\n\r\nexport const getRMQConfig = (): IRMQServiceAsyncOptions => ({\r\n\tinject: [ConfigService],\r\n\timports: [ConfigModule],\r\n\tuseFactory: (configService: ConfigService) => ({\r\n\t\texchangeName: configService.get('AMQP_EXCHANGE') ?? '',\r\n\t\tconnections: [\r\n\t\t\t{\r\n\t\t\t\tlogin: configService.get('AMQP_USER') ?? '',\r\n\t\t\t\tpassword: configService.get('AMQP_PASSWORD') ?? '',\r\n\t\t\t\thost: configService.get('AMQP_HOSTNAME') ?? ''\r\n\t\t\t}\r\n\t\t],\r\n\t\tqueueName: configService.get('AMQP_QUEUE'),\r\n\t\tprefetchCount: 32,\r\n\t\tserviceName: 'rmq-profile'\r\n\t})\r\n})\r\n","import {\r\n  BadRequestException,\r\n  Injectable,\r\n  NotFoundException,\r\n  OnModuleInit,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../../prisma/prisma.service';\r\nimport { ISocialMediaVariant } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { ProfileEntity } from '../entities/profile.entity';\r\nimport { Prisma } from '@prisma/client/profiles';\r\nimport { CredentialEntity } from '../entities/credential.entity';\r\nimport { SocialMediaNodeEntity } from '../entities/socialMediaNode.entity';\r\nimport { SocialMediaVariantEntity } from '../entities/socialMediaVariant.entity';\r\n\r\n@Injectable()\r\nexport class ProfilesRepository implements OnModuleInit {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  //\r\n  // DEFAULTS\r\n  //\r\n  defaultSocialMediaVariantIds: number[];\r\n\r\n  async onModuleInit() {\r\n    this.defaultSocialMediaVariantIds =\r\n      await this.generateDefaultSocialMediaVariants();\r\n  }\r\n\r\n  async generateDefaultSocialMediaVariants() {\r\n    const socialMediaVariants: ISocialMediaVariant[] = [\r\n      { iconUrl: '111', name: '11111111111111111111111' },\r\n      { iconUrl: '222', name: '22222222222222222222222' },\r\n    ];\r\n\r\n    return Promise.all(\r\n      socialMediaVariants.map(async (variant) => {\r\n        return this.prisma.socialMediaVariant\r\n          .upsert({\r\n            where: { name: variant.name },\r\n            create: variant,\r\n            update: {},\r\n          })\r\n          .then((variant) => variant.id);\r\n      })\r\n    );\r\n  }\r\n\r\n  async generateProfileDefault(userId: string) {\r\n    const defaults: Prisma.ProfileCreateInput = {\r\n      userId: userId,\r\n      isDefault: true,\r\n      credential: {\r\n        create: {\r\n          firstName: '',\r\n          lastName: '',\r\n          birthday: null,\r\n        },\r\n      },\r\n      socialMediaNodes: {\r\n        createMany: {\r\n          data: this.defaultSocialMediaVariantIds.map((id) => {\r\n            return {\r\n              variantId: id,\r\n              isActive: false,\r\n              link: '',\r\n            } as Prisma.SocialMediaNodeUncheckedCreateWithoutProfileInput;\r\n          }),\r\n          skipDuplicates: true,\r\n        },\r\n      },\r\n    };\r\n\r\n    return this.prisma.profile.create({\r\n      data: defaults,\r\n      select: {\r\n        id: true,\r\n        userId: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  //\r\n  // PROFILE\r\n  //\r\n\r\n  private async generateProfileCreateInputWithDefault(\r\n    userId: string\r\n  ): Promise<Prisma.ProfileCreateInput> {\r\n    const defaultProfile = await this.findProfileDefaultNested(userId);\r\n\r\n    const profileCreateInput: Prisma.ProfileCreateInput = {\r\n      userId: userId,\r\n      isDefault: false,\r\n    };\r\n    const credential = defaultProfile.credential?.getPublic();\r\n    if (credential) {\r\n      profileCreateInput.credential = {\r\n        create: credential,\r\n      };\r\n    }\r\n    const socialMedias = defaultProfile.socialMediaNodes?.map((socialMedia) => {\r\n      return {\r\n        ...socialMedia.getPublicSelf(),\r\n        socialMediaVariant: {\r\n          connect: socialMedia.socialMediaVariant.getPublic(),\r\n        },\r\n      };\r\n    });\r\n    if (socialMedias) {\r\n      profileCreateInput.socialMediaNodes = {\r\n        create: socialMedias,\r\n      };\r\n    }\r\n    return profileCreateInput;\r\n  }\r\n\r\n  private async queryFindProfileSelf(\r\n    filter: Prisma.ProfileWhereInput,\r\n    select: Prisma.ProfileSelect = {}\r\n  ) {\r\n    const queriedObject = await this.prisma.profile.findFirst({\r\n      where: filter,\r\n      select: select,\r\n    });\r\n\r\n    if (!queriedObject)\r\n      throw new NotFoundException('Profile not found in database!');\r\n\r\n    return queriedObject;\r\n  }\r\n\r\n  private async queryFindProfileNested(filter: Prisma.ProfileWhereInput) {\r\n    const queriedObject = await this.prisma.profile.findFirst({\r\n      where: filter,\r\n      include: {\r\n        credential: true,\r\n        socialMediaNodes: {\r\n          include: {\r\n            socialMediaVariant: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    if (!queriedObject)\r\n      throw new NotFoundException('Profile not found in database!');\r\n\r\n    return new ProfileEntity(queriedObject);\r\n  }\r\n\r\n  async findProfileDefaultNested(userId: string) {\r\n    const filter = { isDefault: true, userId: userId };\r\n    return this.queryFindProfileNested(filter);\r\n  }\r\n\r\n  async findProfileDefaultId(userId: string) {\r\n    const filter = { isDefault: true, userId: userId };\r\n    const select = { id: true };\r\n    const queried = await this.queryFindProfileSelf(filter, select);\r\n    return queried.id;\r\n  }\r\n\r\n  async findProfileNestedById(profileId: string) {\r\n    const filter = { id: profileId };\r\n    return this.queryFindProfileNested(filter);\r\n  }\r\n\r\n  async findManyProfileIdsByUserId(userId: string) {\r\n    const queried = await this.prisma.profile.findMany({\r\n      select: { id: true },\r\n      where: { userId: userId },\r\n    });\r\n\r\n    return queried.map((item) => item.id);\r\n  }\r\n\r\n  async createProfile(userId: string) {\r\n    const profileCreateInput = await this.generateProfileCreateInputWithDefault(\r\n      userId\r\n    );\r\n\r\n    return this.prisma.profile.create({\r\n      data: profileCreateInput,\r\n      select: {\r\n        id: true,\r\n        userId: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async deleteProfileById(profileId: string) {\r\n    return this.prisma.profile.delete({\r\n      where: {\r\n        id: profileId,\r\n      },\r\n      select: {\r\n        id: true,\r\n        userId: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async updateProfileSelf(profileId: string, profile: ProfileEntity) {\r\n    return this.prisma.profile.update({\r\n      where: { id: profileId },\r\n      data: profile.getPublicSelf(),\r\n      select: { id: true, userId: true },\r\n    });\r\n  }\r\n\r\n  //\r\n  // CREDENTIAL\r\n  //\r\n\r\n  private async queryUpdateCredential(\r\n    where: Prisma.CredentialWhereUniqueInput,\r\n    credential: CredentialEntity\r\n  ) {\r\n    return this.prisma.credential.update({\r\n      where: where,\r\n      data: credential.getPublic(),\r\n      select: {\r\n        id: true,\r\n        profileId: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async updateCredentialByProfileId(\r\n    profileId: string,\r\n    credential: CredentialEntity\r\n  ) {\r\n    return this.queryUpdateCredential(\r\n      {\r\n        profileId: profileId,\r\n      },\r\n      credential\r\n    );\r\n  }\r\n\r\n  async updateCredentialById(id: string, credential: CredentialEntity) {\r\n    return this.queryUpdateCredential(\r\n      {\r\n        id: id,\r\n      },\r\n      credential\r\n    );\r\n  }\r\n\r\n  //\r\n  // SOCIAL_MEDIAS\r\n  //\r\n\r\n  private async generateSocialMediaNodesCreateManyInput(\r\n    profileId: string,\r\n    socialMediaNodes: SocialMediaNodeEntity[]\r\n  ): Promise<Prisma.SocialMediaNodeCreateManyInput[]> {\r\n    const createManyInput: Prisma.SocialMediaNodeCreateManyInput[] =\r\n      socialMediaNodes.map((node) => {\r\n        const variantId = node.socialMediaVariant.id;\r\n        if (!variantId) throw new Error('variantId is not defined');\r\n        return {\r\n          ...node.getPublicSelf(),\r\n          profileId: profileId,\r\n          variantId: variantId,\r\n        };\r\n      });\r\n    return createManyInput;\r\n  }\r\n\r\n  async findSocialMediaNodesNestedByProfileId(profileId: string) {\r\n    const queried = await this.prisma.socialMediaNode.findMany({\r\n      where: {\r\n        profileId: profileId,\r\n      },\r\n      include: { socialMediaVariant: true },\r\n    });\r\n    return queried.map((node) => {\r\n      return new SocialMediaNodeEntity(node);\r\n    });\r\n  }\r\n\r\n  async findSocialMediaNodesUniqueFieldsByProfileId(profileId: string) {\r\n    const queried = await this.prisma.socialMediaNode.findMany({\r\n      where: {\r\n        profileId: profileId,\r\n      },\r\n      select: { profileId: true, variantId: true },\r\n    });\r\n    return queried;\r\n  }\r\n\r\n  async findExistedSocialMediaNodes(socialMediaNodeIds: string[]) {\r\n    const queried = await this.prisma.socialMediaNode.findMany({\r\n      where: { id: { in: socialMediaNodeIds } },\r\n      include: { socialMediaVariant: true },\r\n    });\r\n    return queried.map((node) => new SocialMediaNodeEntity(node));\r\n  }\r\n\r\n  private async queryCreateManySocialMediaNodes(\r\n    createManyInput: Prisma.SocialMediaNodeCreateManyInput[]\r\n  ) {\r\n    return this.prisma.socialMediaNode.createMany({\r\n      data: createManyInput,\r\n      skipDuplicates: true,\r\n    });\r\n  }\r\n\r\n  async deleteSocialMediasByProfileId(profileId: string) {\r\n    return this.prisma.socialMediaNode.deleteMany({\r\n      where: { profileId: profileId },\r\n    });\r\n  }\r\n\r\n  async updateSocialMedias(\r\n    profileId: string,\r\n    socialMediaNodes: SocialMediaNodeEntity[]\r\n  ) {\r\n    try {\r\n      const createInput = await this.generateSocialMediaNodesCreateManyInput(\r\n        profileId,\r\n        socialMediaNodes\r\n      );\r\n      const deleteResult = await this.deleteSocialMediasByProfileId(profileId);\r\n      const createResult = await this.queryCreateManySocialMediaNodes(\r\n        createInput\r\n      );\r\n      return createResult;\r\n    } catch (e) {\r\n      if (e instanceof Error) throw new BadRequestException(e.message);\r\n      throw new BadRequestException();\r\n    }\r\n  }\r\n\r\n  //\r\n  // SOCIAL_MEDIAS_VARIANTS\r\n  //\r\n\r\n  private async queryExistedSocialMediaVariantsByNames(\r\n    names: string[],\r\n    select: Prisma.SocialMediaVariantSelect | null = null\r\n  ) {\r\n    return this.prisma.socialMediaVariant.findMany({\r\n      select: select,\r\n      where: {\r\n        name: {\r\n          in: names,\r\n        },\r\n      },\r\n      orderBy: {\r\n        name: Prisma.SortOrder.asc,\r\n      },\r\n    });\r\n  }\r\n\r\n  async findExistedSocialMediaVariantIdsByNames(names: string[]) {\r\n    const queried = await this.queryExistedSocialMediaVariantsByNames(names, {\r\n      id: true,\r\n    });\r\n    return queried.map((variant) => variant.id);\r\n  }\r\n\r\n  async findExistedSocialMediaVariantNamesByNames(names: string[]) {\r\n    const queried = await this.queryExistedSocialMediaVariantsByNames(names, {\r\n      id: true,\r\n    });\r\n    return queried.map((variant) => variant.name);\r\n  }\r\n\r\n  async findExistedSocialMediaVariantsByNames(names: string[]) {\r\n    const queried = await this.queryExistedSocialMediaVariantsByNames(names);\r\n    return queried.map((variant) => {\r\n      return new SocialMediaVariantEntity(variant);\r\n    });\r\n  }\r\n\r\n  async createSocialMediaVariants(variants: SocialMediaVariantEntity[]) {\r\n    return this.prisma.socialMediaVariant.createMany({\r\n      data: variants.map((variant) => variant.getPublic()),\r\n      skipDuplicates: true,\r\n    });\r\n  }\r\n\r\n  //\r\n  // Utility\r\n  //\r\n\r\n  async isProfilePublic(profileId: string) {\r\n    const queried = await this.prisma.publicProfile.findUnique({\r\n      where: { profileId: profileId },\r\n    });\r\n    return !!queried;\r\n  }\r\n\r\n  async findManyPublicProfileIdsByUserId(userId: string) {\r\n    const queried = await this.prisma.publicProfile.findMany({\r\n      where: { profile: { userId: userId } },\r\n      select: { profileId: true },\r\n    });\r\n    return queried.map((node) => node.profileId);\r\n  }\r\n}\r\n","import {\r\n  Injectable,\r\n  OnModuleInit,\r\n  OnModuleDestroy,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { PrismaClient, Prisma } from '@prisma/client/profiles';\r\n\r\n@Injectable()\r\nexport class PrismaService\r\n  extends PrismaClient<Prisma.PrismaClientOptions, Prisma.LogLevel>\r\n  implements OnModuleInit, OnModuleDestroy\r\n{\r\n  private readonly logger = new Logger(PrismaService.name);\r\n\r\n  constructor() {\r\n    super({\r\n      log: [\r\n        {\r\n          emit: 'event',\r\n          level: 'query',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'error',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'info',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'warn',\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  async onModuleInit() {\r\n    await this.$connect();\r\n\r\n    this.$on('error', ({ message }) => {\r\n      this.logger.error(message);\r\n    });\r\n    this.$on('warn', ({ message }) => {\r\n      this.logger.warn(message);\r\n    });\r\n    this.$on('info', ({ message }) => {\r\n      this.logger.debug(message);\r\n    });\r\n    this.$on('query', ({ query, params }) => {\r\n      this.logger.log(`${query}; ${params}`);\r\n    });\r\n  }\r\n\r\n  async onModuleDestroy() {\r\n    await this.$disconnect();\r\n  }\r\n}\r\n","module.exports = require(\"@prisma/client/profiles\");","import {\r\n   ICredential,\r\n  IProfile,\r\n  ISocialMedias,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { CredentialEntity } from './credential.entity';\r\nimport { SocialMediaNodeEntity } from './socialMediaNode.entity';\r\n\r\nexport class ProfileEntity implements IProfile {\r\n  id?: string;\r\n  userId: string;\r\n  socialMediaNodes?: SocialMediaNodeEntity[];\r\n  credential?: CredentialEntity | null;\r\n\r\n  constructor(profile: IProfile) {\r\n    this.id = profile.id;\r\n    this.userId = profile.userId;\r\n    this.socialMediaNodes = profile.socialMediaNodes?.map((socialMedia) => {\r\n      return new SocialMediaNodeEntity(socialMedia);\r\n    });\r\n    if (profile.credential)\r\n      this.credential = new CredentialEntity(profile.credential);\r\n  }\r\n\r\n  public getPublicSelf(): Omit<IProfile, 'id' | 'socialMediaNodes' | 'credential'> {\r\n    return {\r\n      userId: this.userId,\r\n    };\r\n  }\r\n\r\n  public getPublicNested(): Omit<IProfile, 'id'> {\r\n    return {\r\n      userId: this.userId,\r\n      socialMediaNodes: this.socialMediaNodes?.map((SocialMediaEntity) =>\r\n        SocialMediaEntity.getPublicNested()\r\n      ),\r\n      credential: this.credential?.getPublic(),\r\n    };\r\n  }\r\n\r\n  public getSocialMediasEntity() {\r\n    return this.socialMediaNodes;\r\n  }\r\n\r\n  public getCredentialsEntity() {\r\n    return this.credential;\r\n  }\r\n}\r\n","import { ICredential } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\n\r\nexport class CredentialEntity implements ICredential {\r\n  id?: string;\r\n  profileId?: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  birthday: Date | null;\r\n\r\n  constructor(credential: ICredential) {\r\n    this.id = credential.id;\r\n    this.profileId = credential.profileId;\r\n    this.firstName = credential.firstName;\r\n    this.lastName = credential.lastName;\r\n    this.birthday = credential.birthday;\r\n  }\r\n\r\n  public getPublic(): Omit<ICredential, 'id' | 'profileId'> {\r\n    return {\r\n      firstName: this.firstName,\r\n      lastName: this.lastName,\r\n      birthday: this.birthday,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n  ISocialMediaNode,\r\n  ISocialMediaVariant,\r\n  ISocialMedias,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { SocialMediaVariantEntity } from './socialMediaVariant.entity';\r\n\r\nexport class SocialMediaNodeEntity implements ISocialMediaNode {\r\n  id?: string;\r\n  profileId?: string;\r\n  socialMediaVariant: SocialMediaVariantEntity;\r\n  isActive: boolean;\r\n  link: string;\r\n\r\n  constructor(socialMedia: ISocialMediaNode) {\r\n    this.id = socialMedia.id;\r\n    this.profileId = socialMedia.profileId;\r\n    this.socialMediaVariant = new SocialMediaVariantEntity(\r\n      socialMedia.socialMediaVariant\r\n    );\r\n    this.isActive = socialMedia.isActive;\r\n    this.link = socialMedia.link;\r\n  }\r\n\r\n  public getPublicSelf(): Omit<\r\n    ISocialMediaNode,\r\n    'id' | 'profileId' | 'socialMediaVariant'\r\n  > {\r\n    return {\r\n      isActive: this.isActive,\r\n      link: this.link,\r\n    };\r\n  }\r\n\r\n  public getPublicNested(): Omit<ISocialMediaNode, 'id' | 'profileId'> {\r\n    return {\r\n      socialMediaVariant: this.socialMediaVariant.getPublic(),\r\n      isActive: this.isActive,\r\n      link: this.link,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n  ISocialMediaVariant,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\n\r\nexport class SocialMediaVariantEntity implements ISocialMediaVariant {\r\n  id?: number;\r\n  iconUrl: string | null;\r\n  name: string;\r\n\r\n  constructor(socialMediaVariant: ISocialMediaVariant) {\r\n    this.id = socialMediaVariant.id;\r\n    this.iconUrl = socialMediaVariant.iconUrl;\r\n    this.name = socialMediaVariant.name;\r\n  }\r\n\r\n  public getPublic(): Omit<ISocialMediaVariant, 'id'> {\r\n    return {\r\n      iconUrl: this.iconUrl,\r\n      name: this.name,\r\n    };\r\n  }\r\n}\r\n","import {\r\n  BadRequestException,\r\n  Injectable,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  NotFoundException,\r\n  UnauthorizedException,\r\n} from '@nestjs/common';\r\nimport { RMQService } from 'nestjs-rmq';\r\nimport { ProfilesRepository } from '../repositories/profiles.repository';\r\nimport { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { SocialMediaVariantEntity } from '../entities/socialMediaVariant.entity';\r\nimport { HttpService } from '@nestjs/axios';\r\nimport { IconsService } from './icons8.service';\r\nimport { SocialMediaNodeEntity } from '../entities/socialMediaNode.entity';\r\nimport { CredentialEntity } from '../entities/credential.entity';\r\nimport { ProfileEntity } from '../entities/profile.entity';\r\nimport { profile } from 'console';\r\nimport {\r\n  extractSocialMediaVariants,\r\n  extractSocialMediaVariantsNames,\r\n} from '../entities/entities.utility';\r\n// import { IProfileDefaults } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\n\r\n@Injectable()\r\nexport class ProfileService {\r\n  constructor(private readonly profilesRepository: ProfilesRepository) {}\r\n\r\n  async generateProfileDefault(userId: string) {\r\n    return this.profilesRepository.generateProfileDefault(userId);\r\n  }\r\n\r\n  async createProfile(userId: string) {\r\n    return this.profilesRepository.createProfile(userId);\r\n  }\r\n\r\n  async updateProfile(profileId: string, profile: ProfileEntity) {\r\n    if (profile.socialMediaNodes) {\r\n      await this.updateSocialMediaNodes(profileId, profile.socialMediaNodes);\r\n    }\r\n    if (profile.credential) {\r\n      await this.updateCredential(profileId, profile.credential);\r\n    }\r\n    const profileUpdateResult = await this.profilesRepository.updateProfileSelf(\r\n      profileId,\r\n      profile\r\n    );\r\n    return profileUpdateResult;\r\n  }\r\n\r\n  async updateCredential(profileId: string, credential: CredentialEntity) {\r\n    return this.profilesRepository.updateCredentialByProfileId(\r\n      profileId,\r\n      credential\r\n    );\r\n  }\r\n\r\n  async synchronizeSocialMediaNodesVariantsWithDatabase(\r\n    socialMediaNodes: SocialMediaNodeEntity[]\r\n  ) {\r\n    const variantNames = await extractSocialMediaVariantsNames(\r\n      socialMediaNodes\r\n    );\r\n    const storedVariants =\r\n      await this.profilesRepository.findExistedSocialMediaVariantsByNames(\r\n        variantNames\r\n      );\r\n    socialMediaNodes.forEach((node) => {\r\n      const storedVariant = storedVariants.find(\r\n        (variant) => variant.name === node.socialMediaVariant.name\r\n      );\r\n      if (!storedVariant) throw new Error('socialMediaVariant not found');\r\n      node.socialMediaVariant = storedVariant;\r\n    });\r\n  }\r\n\r\n  async updateSocialMediaNodes(\r\n    profileId: string,\r\n    socialMediaNodes: SocialMediaNodeEntity[]\r\n  ) {\r\n    const variants = await extractSocialMediaVariants(socialMediaNodes);\r\n    await this.appendSocialMediasVariants(variants);\r\n    await this.synchronizeSocialMediaNodesVariantsWithDatabase(\r\n      socialMediaNodes\r\n    );\r\n\r\n    return this.profilesRepository.updateSocialMedias(\r\n      profileId,\r\n      socialMediaNodes\r\n    );\r\n  }\r\n\r\n  async appendSocialMediasVariants(variants: SocialMediaVariantEntity[]) {\r\n    const names = variants.map((variant) => variant.name);\r\n    const existedNames =\r\n      await this.profilesRepository.findExistedSocialMediaVariantNamesByNames(\r\n        names\r\n      );\r\n    const notExisted = variants.filter(\r\n      (variant) => !existedNames.includes(variant.name)\r\n    );\r\n    // TODO: uncomment\r\n    // await this.iconsService.fillSocialMediaVariantIcons(notExisted);\r\n    return this.profilesRepository.createSocialMediaVariants(notExisted);\r\n  }\r\n\r\n  //\r\n  // UTILITY\r\n  //\r\n\r\n  async isProfilePublic(profileId: string) {\r\n    return this.profilesRepository.isProfilePublic(profileId);\r\n  }\r\n\r\n  async validateProfileQueryPermission(profileId: string, userId: string) {\r\n    const isPublic = await this.isProfilePublic(profileId);\r\n    if (isPublic) return true;\r\n\r\n    const isUserAllowed = await this.validateProfileEditPermission(userId, profileId);\r\n    if (isUserAllowed) return true;\r\n\r\n    throw new UnauthorizedException();\r\n  }\r\n\r\n  async validateProfileEditPermission(userId: string, profileId: string) {\r\n    const profile = await this.profilesRepository.findProfileNestedById(\r\n      profileId\r\n    );\r\n    if (profile.userId !== userId) throw new UnauthorizedException();\r\n    return true;\r\n  }\r\n\r\n  async getDefaultProfileId(userId: string) {\r\n    return this.profilesRepository.findProfileDefaultId(userId);\r\n  }\r\n}\r\n","import { SocialMediaNodeEntity } from './socialMediaNode.entity';\r\n\r\n//\r\n// SOCIAL MEDIA NODE\r\n//\r\n\r\nexport async function extractSocialMediaNodesPublicSelf(\r\n  socialMediaNodes: SocialMediaNodeEntity[]\r\n) {\r\n  return socialMediaNodes.map((node) => {\r\n    return node.getPublicSelf();\r\n  });\r\n}\r\n\r\nexport async function extractSocialMediaNodesPublicNested(\r\n  socialMediaNodes: SocialMediaNodeEntity[]\r\n) {\r\n  return socialMediaNodes.map((node) => {\r\n    return node.getPublicNested();\r\n  });\r\n}\r\n\r\n//\r\n// SOCIAL MEDIA VARIANT\r\n//\r\n\r\nexport async function extractSocialMediaVariants(\r\n  socialMediaNodes: SocialMediaNodeEntity[]\r\n) {\r\n  return socialMediaNodes.map((node) => {\r\n    return node.socialMediaVariant;\r\n  });\r\n}\r\n\r\nexport async function extractSocialMediaVariantsPublic(\r\n  socialMediaNodes: SocialMediaNodeEntity[]\r\n) {\r\n  return socialMediaNodes.map((node) => {\r\n    return node.socialMediaVariant.getPublic();\r\n  });\r\n}\r\n\r\nexport async function extractSocialMediaVariantsNames(\r\n  socialMediaNodes: SocialMediaNodeEntity[]\r\n) {\r\n  return socialMediaNodes.map((node) => {\r\n    return node.socialMediaVariant.name;\r\n  });\r\n}\r\n","import { Body, Controller, UnauthorizedException } from '@nestjs/common';\r\nimport { RMQValidate, RMQRoute } from 'nestjs-rmq';\r\nimport {\r\n  ProfileChange,\r\n  ProfileChangeCredentialDefault,\r\n  ProfileChangeDefault,\r\n  ProfileCreateOne,\r\n  ProfileDeleteOne,\r\n  ProfileQueryDefault,\r\n} from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { ProfilesRepository } from '../repositories/profiles.repository';\r\nimport { ProfileService } from '../services/porfiles.service';\r\nimport { ProfileEntity } from '../entities/profile.entity';\r\nimport { CredentialEntity } from '../entities/credential.entity';\r\n\r\n@Controller()\r\nexport class ProfilesCommands {\r\n  constructor(\r\n    private readonly profileService: ProfileService,\r\n    private readonly profileRepository: ProfilesRepository) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileCreateOne.topic)\r\n  async createProfile(\r\n    @Body() { userId }: ProfileCreateOne.Request\r\n  ): Promise<ProfileCreateOne.Response> {\r\n    return this.profileService.createProfile(userId);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChange.topic)\r\n  async changeProfile(\r\n    @Body() { userId, profileId, profile }: ProfileChange.Request\r\n  ): Promise<ProfileChange.Response> {\r\n    const isEditPermitted =\r\n      await this.profileService.validateProfileEditPermission(\r\n        userId,\r\n        profileId\r\n      );\r\n    if (!isEditPermitted) throw new UnauthorizedException();\r\n\r\n    const profileEntity = new ProfileEntity(profile);\r\n    profileEntity.userId = userId;\r\n    return this.profileService.updateProfile(profileId, profileEntity);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChangeDefault.topic)\r\n  async changeProfileDefault(\r\n    @Body() { userId, profile }: ProfileChangeDefault.Request\r\n  ): Promise<ProfileChangeDefault.Response> {\r\n    const profileId = await this.profileService.getDefaultProfileId(userId);\r\n    const profileEntity = new ProfileEntity(profile);\r\n    profileEntity.userId = userId;\r\n    return this.profileService.updateProfile(profileId, profileEntity);\r\n  }\r\n\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileDeleteOne.topic)\r\n  async deleteProfile(\r\n    @Body() { userId, profileId }: ProfileDeleteOne.Request\r\n  ): Promise<ProfileDeleteOne.Response> {\r\n    const isEditPermitted =\r\n      await this.profileService.validateProfileEditPermission(\r\n        userId,\r\n        profileId\r\n      );\r\n    if (!isEditPermitted) throw new UnauthorizedException();\r\n\r\n    return this.profileRepository.deleteProfileById(profileId);\r\n  }\r\n}\r\n","//\n// accounts\n//\nexport * from './lib/account/account.login';\nexport * from './lib/account/account.register';\nexport * from './lib/account/account.change-user-info';\nexport * from './lib/account/account.query-user-info';\nexport * from './lib/account/account.user-created.event';\n\n//\n// profiles\n//\nexport * from './lib/profile/profile.create';\nexport * from './lib/profile/profile.delete';\nexport * from './lib/profile/profile.change';\nexport * from './lib/profile/profile.query-profile';\nexport * from './lib/profile/profile.change-default';\nexport * from './lib/profile/profile.query-profile-default';\nexport * from './lib/profile/profile.query-user-profiles-ids';\n\nexport * from './lib/profile/nested/profile.change-credential';\nexport * from './lib/profile/nested/profile.change-credential-default';\nexport * from './lib/profile/nested/profile.change-social-media-nodes';\nexport * from './lib/profile/nested/profile.change-social-media-nodes-default';\n","import { IsEmail, IsString } from 'class-validator';\n\nexport namespace AccountLogin {\n\texport const topic = 'account.login.command';\n\n\texport class Request {\n\t\t@IsEmail()\n\t\temail: string;\n\n\t\t@IsString()\n\t\tpassword: string;\n\t}\n\n\texport class Response {\n\t\taccess_token: string;\n\t}\n}\n\n","module.exports = require(\"class-validator\");","import { IsEmail, IsString } from 'class-validator';\n\nexport namespace AccountRegister {\n  export const topic = 'account.register.command';\n\n  export class Request {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n  }\n\n  export class Response {\n    email: string;\n  }\n}\n","import { IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace AccountChangeUserInfo {\r\n\texport const topic = 'account.change_user_info.command';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tid: string;\r\n\r\n\t\tuser: Pick<IUser, \"isVerified\" | \"passwordHash\">;\r\n\t}\r\n\r\n\texport class Response {}\r\n}\r\n\r\n","import { IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\nimport { IsString } from 'class-validator';\n\nexport namespace AccountQueryUserInfo {\n\texport const topic = 'account.user_info.query';\n\n\texport class Request {\n\t\t@IsString()\n\t\tuserId: string;\n\t}\n\n\texport class Response {\n\t\tuser: Omit<IUser, 'passwordHash'>;\n\t}\n}\n\n","import { IDomainEvent } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsEmail, IsString } from 'class-validator';\r\n\r\nexport namespace AccountUserCreatedEvent {\r\n  export const topic = 'account.user_created.event';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileCreateOne {\r\n  export const topic = 'profile.create_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileDeleteOne {\r\n  export const topic = 'profile.delete_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChange {\r\n  export const topic = 'profile.change_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    profile: Omit<IProfile, 'id'>;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id?: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQuery {\r\n\texport const topic = 'profile.user_profile.query';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tuserId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tprofile: IProfile;\r\n\t}\r\n}\r\n\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeDefault {\r\n  export const topic = 'profile.change_user_profile_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    profile: Omit<IProfile, 'id'>;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id'> {\r\n    id: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQueryDefault {\r\n\texport const topic = 'profile.user_profile_default.query';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tuserId: string;\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tprofile: IProfile;\r\n\t}\r\n}\r\n\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQueryUserProfilesIds {\r\n  export const topic = 'profile.user_profiles_ids.query';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n\r\n  export class Response {\r\n    profileIds: string[];\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeCredential {\r\n  export const topic = 'profile.change_profile_credential.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    @IsString()\r\n    userId: string;\r\n\r\n    credential: Omit<ICredential, 'id' | 'profileId'>;\r\n  }\r\n\r\n  export class Response implements Partial<Pick<ICredential, 'id' | 'profileId'>> {\r\n    id?: string;\r\n    profileId?: string;\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n  IProfile,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeCredentialDefault {\r\n  export const topic = 'profile.change_profile_credential_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    credential: Omit<ICredential, 'id' | 'profileId'>;\r\n  }\r\n\r\n  export class Response implements Pick<ICredential, 'id' | 'profileId'> {\r\n    id?: string;\r\n    profileId?: string;\r\n  }\r\n}\r\n","import {\r\n  ISocialMediaNode,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeSocialMediaNodes {\r\n  export const topic = 'profile.change_social_media_nodes.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    @IsString()\r\n    userId: string;\r\n\r\n    socialMediaNodes: Omit<ISocialMediaNode, 'id' | 'profileId'>[];\r\n  }\r\n\r\n  export class Response {\r\n    count: number;\r\n  }\r\n}\r\n","import {\r\n  ISocialMediaNode,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeSocialMediaNodesDefault {\r\n  export const topic = 'profile.change_social_media_nodes_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    socialMediaNodes: Omit<ISocialMediaNode, 'id' | 'profileId'>[];\r\n  }\r\n\r\n  export class Response {\r\n    count: number;\r\n  }\r\n}\r\n","import { Body, Controller } from '@nestjs/common';\r\nimport { RMQValidate, RMQRoute } from 'nestjs-rmq';\r\nimport {\r\n  ProfileQuery,\r\n  ProfileQueryDefault,\r\n  ProfileQueryUserProfilesIds,\r\n} from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { ProfilesRepository } from '../repositories/profiles.repository';\r\nimport { ProfileService } from '../services/porfiles.service';\r\n\r\n// query default\r\n// query\r\n// query profiles IDS\r\n\r\n@Controller()\r\nexport class ProfilesQueries {\r\n  constructor(\r\n    private readonly profileRepository: ProfilesRepository,\r\n    private readonly profileService: ProfileService\r\n  ) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileQueryDefault.topic)\r\n  async getProfileDefault(\r\n    @Body() { userId }: ProfileQueryDefault.Request\r\n  ): Promise<ProfileQueryDefault.Response> {\r\n    const profileEntity = await this.profileRepository.findProfileDefaultNested(\r\n      userId\r\n    );\r\n    return {\r\n      profile: profileEntity,\r\n    };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileQuery.topic)\r\n  async getProfile(\r\n    @Body() { userId, profileId }: ProfileQuery.Request\r\n  ): Promise<ProfileQuery.Response> {\r\n    await this.profileService.validateProfileQueryPermission(profileId, userId);\r\n    const profileEntity = await this.profileRepository.findProfileNestedById(\r\n      profileId\r\n    );\r\n    return {\r\n      profile: profileEntity,\r\n    };\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileQueryUserProfilesIds.topic)\r\n  async getProfilesIdsForUser(\r\n    @Body() { userId }: ProfileQueryUserProfilesIds.Request\r\n  ): Promise<ProfileQueryUserProfilesIds.Response> {\r\n    const ids = await this.profileRepository.findManyProfileIdsByUserId(userId);\r\n    return {\r\n      profileIds: ids,\r\n    }\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { PrismaService } from './prisma.service';\r\n\r\n@Module({\r\n  imports: [],\r\n  controllers: [],\r\n  providers: [PrismaService],\r\n  exports: [PrismaService],\r\n})\r\nexport class PrismaModule {}\r\n","import { Body, Controller } from '@nestjs/common';\r\nimport { RMQValidate, RMQRoute } from 'nestjs-rmq';\r\nimport {\r\n  AccountUserCreatedEvent,\r\n  ProfileChangeDefault,\r\n  ProfileQueryDefault,\r\n} from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { ProfileService } from '../services/porfiles.service';\r\n\r\n@Controller()\r\nexport class ProfilesEvents {\r\n  constructor(private readonly profileService: ProfileService) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountUserCreatedEvent.topic)\r\n  async userCreated(\r\n    @Body() { userId }: AccountUserCreatedEvent.Request\r\n  ) {\r\n\t\tthis.profileService.generateProfileDefault(userId);\r\n  }\r\n}\r\n","module.exports = require(\"@nestjs/axios\");","import { Injectable, Logger, NotFoundException, NotImplementedException } from '@nestjs/common';\r\nimport { RMQService } from 'nestjs-rmq';\r\nimport { ProfilesRepository } from '../repositories/profiles.repository';\r\nimport { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { SocialMediaVariantEntity } from '../entities/socialMediaVariant.entity';\r\nimport { HttpService } from '@nestjs/axios';\r\n// import { IProfileDefaults } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\n\r\n@Injectable()\r\nexport class IconsService {\r\n  constructor(\r\n    private readonly httpService: HttpService\r\n  ) {}\r\n\r\n  async findIconURL(term: string):Promise<string> {\r\n    //TODO: fetch api for icon url\r\n    throw new NotImplementedException();\r\n  }\r\n\r\n  async fillSocialMediaVariantIcons(variants: SocialMediaVariantEntity[]) {\r\n    throw new NotImplementedException();\r\n    for(const variant of variants) {\r\n      variant.iconUrl = await this.findIconURL(variant.name);\r\n    }\r\n  }\r\n}\r\n","import { Body, Controller, UnauthorizedException } from '@nestjs/common';\r\nimport { RMQValidate, RMQRoute } from 'nestjs-rmq';\r\nimport { ProfileService } from '../services/porfiles.service';\r\nimport { ProfileEntity } from '../entities/profile.entity';\r\nimport { CredentialEntity } from '../entities/credential.entity';\r\nimport {\r\n  ProfileChangeCredential,\r\n  ProfileChangeCredentialDefault,\r\n  ProfileChangeSocialMediaNodes,\r\n  ProfileChangeSocialMediaNodesDefault,\r\n} from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { SocialMediaNodeEntity } from '../entities/socialMediaNode.entity';\r\n\r\n@Controller()\r\nexport class ProfilesNestedCommands {\r\n  constructor(private readonly profileService: ProfileService) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChangeCredential.topic)\r\n  async changeCredential(\r\n    @Body() { profileId, userId, credential }: ProfileChangeCredential.Request\r\n  ): Promise<ProfileChangeCredential.Response> {\r\n    const isEditPermitted =\r\n      await this.profileService.validateProfileEditPermission(\r\n        userId,\r\n        profileId\r\n      );\r\n    if (!isEditPermitted) throw new UnauthorizedException();\r\n\r\n    const credentialEntity = new CredentialEntity(credential);\r\n    return this.profileService.updateCredential(profileId, credentialEntity);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChangeCredentialDefault.topic)\r\n  async changeCredentialDefault(\r\n    @Body() { userId, credential }: ProfileChangeCredentialDefault.Request\r\n  ): Promise<ProfileChangeCredentialDefault.Response> {\r\n    const profileId = await this.profileService.getDefaultProfileId(userId);\r\n    const credentialEntity = new CredentialEntity(credential);\r\n    return this.profileService.updateCredential(profileId, credentialEntity);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChangeSocialMediaNodes.topic)\r\n  async changeSocialMediaNodes(\r\n    @Body()\r\n    {\r\n      profileId,\r\n      userId,\r\n      socialMediaNodes,\r\n    }: ProfileChangeSocialMediaNodes.Request\r\n  ): Promise<ProfileChangeSocialMediaNodes.Response> {\r\n    const isEditPermitted =\r\n      await this.profileService.validateProfileEditPermission(\r\n        userId,\r\n        profileId\r\n      );\r\n    if (!isEditPermitted) throw new UnauthorizedException();\r\n\r\n    const socialMediaNodesEntities = socialMediaNodes.map(\r\n      (node) => new SocialMediaNodeEntity(node)\r\n    );\r\n    return this.profileService.updateSocialMediaNodes(profileId, socialMediaNodesEntities);\r\n  }\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(ProfileChangeSocialMediaNodesDefault.topic)\r\n  async changeSocialMediaNodesDefault(\r\n    @Body() { userId, socialMediaNodes }: ProfileChangeSocialMediaNodesDefault.Request\r\n  ): Promise<ProfileChangeSocialMediaNodesDefault.Response> {\r\n    const profileId = await this.profileService.getDefaultProfileId(userId);\r\n    const socialMediaNodesEntities = socialMediaNodes.map(\r\n      (node) => new SocialMediaNodeEntity(node)\r\n    );\r\n    return this.profileService.updateSocialMediaNodes(profileId, socialMediaNodesEntities);\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import 'dotenv/config'\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n\tconst app = await NestFactory.create(AppModule);\n\tawait app.init();\n\tLogger.log(\n\t\t`🚀 Profiles microservice is running`\n\t);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}