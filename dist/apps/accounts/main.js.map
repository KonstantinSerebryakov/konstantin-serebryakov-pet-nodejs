{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"dotenv/config\"","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///./src/app/app.module.ts","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"nestjs-rmq\"","webpack:///./src/app/users/users.module.ts","webpack:///./src/app/users/repositories/users.repository.ts","webpack:///./src/app/users/entities/user.entity.ts","webpack:///external commonjs \"bcryptjs\"","webpack:///./src/prisma/prisma.service.ts","webpack:///external commonjs \"@prisma/accounts-client\"","webpack:///./src/app/users/users.commands.ts","webpack:///./src/app/users/users.service.ts","webpack:///./src/app/users/users.event-emitter.ts","webpack:///../../libs/contracts/src/index.ts","webpack:///../../libs/contracts/src/lib/account/account.login.ts","webpack:///external commonjs \"class-validator\"","webpack:///../../libs/contracts/src/lib/account/account.register.ts","webpack:///../../libs/contracts/src/lib/account/account.change-user-info.ts","webpack:///../../libs/contracts/src/lib/account/account.query-user-info.ts","webpack:///../../libs/contracts/src/lib/account/account.user-created.event.ts","webpack:///../../libs/contracts/src/lib/profile/profile.create.ts","webpack:///../../libs/contracts/src/lib/profile/profile.delete.ts","webpack:///../../libs/contracts/src/lib/profile/profile.change.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-profile.ts","webpack:///../../libs/contracts/src/lib/profile/profile.change-default.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-profile-default.ts","webpack:///../../libs/contracts/src/lib/profile/profile.query-user-profiles-ids.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-credential.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-credential-default.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-social-media-nodes.ts","webpack:///../../libs/contracts/src/lib/profile/nested/profile.change-social-media-nodes-default.ts","webpack:///./src/app/users/users.queries.ts","webpack:///./src/prisma/prisma.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///external commonjs \"@nestjs/jwt\"","webpack:///./src/app/configs/jwt.config.ts","webpack:///./src/app/auth/auth.controller.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/configs/rmq.config.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"dotenv/config\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","import { RMQModule } from 'nestjs-rmq';\nimport { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\n// import { ConfigModule } from '@nestjs/config';\nimport { getRMQConfig } from './configs/rmq.config';\n\n@Module({\n\timports: [\n\t\t// ConfigModule.forRoot({ isGlobal: true, envFilePath: 'envs/.account.env' }),\n\t\tRMQModule.forRootAsync(getRMQConfig()),\n\t\tUsersModule,\n\t\tAuthModule,\n\t],\n})\nexport class AppModule {}\n","module.exports = require(\"tslib\");","module.exports = require(\"nestjs-rmq\");","import { Module } from '@nestjs/common';\r\nimport { UsersRepository } from './repositories/users.repository';\r\nimport { UserCommands } from './users.commands';\r\nimport { UserEventEmitter } from './users.event-emitter';\r\nimport { UserQueries } from './users.queries';\r\nimport { UserService } from './users.service';\r\nimport { PrismaModule } from '../../prisma/prisma.module';\r\n\r\n@Module({\r\n\timports: [PrismaModule],\r\n\tproviders: [UsersRepository, UserEventEmitter, UserService],\r\n\texports: [UsersRepository, UserEventEmitter],\r\n\tcontrollers: [UserCommands, UserQueries],\r\n})\r\nexport class UsersModule {}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { Prisma, User } from '@prisma/accounts-client';\r\nimport { UserEntity } from '../entities/user.entity';\r\nimport { PrismaService } from '../../../prisma/prisma.service';\r\n\r\n@Injectable()\r\nexport class UsersRepository {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n\r\n  async createUser(data: UserEntity): Promise<UserEntity> {\r\n    const userCreateInput: Prisma.UserCreateInput = {\r\n      id: data.id,\r\n      email: data.email,\r\n      passwordHash: data.passwordHash,\r\n    };\r\n\r\n    const newUser = await this.prisma.user.create({\r\n      data: userCreateInput,\r\n    });\r\n    return new UserEntity(newUser);\r\n  }\r\n\r\n  async updateUser({ id: _id, ...rest }: UserEntity): Promise<User> {\r\n    return this.prisma.user.update({\r\n      where: { id: _id },\r\n      data: { ...rest },\r\n    });\r\n  }\r\n\r\n  async findUser(email: string): Promise<User | null> {\r\n    return this.prisma.user.findFirst({\r\n      where: { email: email },\r\n    });\r\n  }\r\n\r\n  async findUserById(id: string): Promise<User | null> {\r\n    return this.prisma.user.findUnique({\r\n      where: { id: id },\r\n    });\r\n  }\r\n\r\n  async deleteUser(email: string): Promise<User> {\r\n    return this.prisma.user.delete({\r\n      where: { email: email },\r\n    });\r\n  }\r\n}\r\n","import { IDomainEvent, IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { compare, genSalt, hash } from 'bcryptjs';\r\n\r\nexport class UserEntity implements IUser {\r\n\tid?: string;\r\n\temail: string;\r\n  isVerified: boolean;\r\n\tpasswordHash: string;\r\n\r\n\tconstructor(user: IUser) {\r\n\t\tthis.id = user.id;\r\n\t\tthis.email = user.email;\r\n    this.isVerified = user.isVerified;\r\n\t\tthis.passwordHash = user.passwordHash;\r\n\t}\r\n\r\n\tpublic getPublicProfile() {\r\n\t\treturn {\r\n      id: this.id,\r\n\t\t\temail: this.email,\r\n      isVerified: this.isVerified,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic async setPassword(password: string) {\r\n\t\tconst salt = await genSalt(10);\r\n\t\tthis.passwordHash = await hash(password, salt);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tpublic validatePassword(password: string) {\r\n\t\treturn compare(password, this.passwordHash);\r\n\t}\r\n}\r\n","module.exports = require(\"bcryptjs\");","import {\r\n  Injectable,\r\n  OnModuleInit,\r\n  OnModuleDestroy,\r\n  Logger,\r\n} from '@nestjs/common';\r\nimport { PrismaClient, Prisma } from '@prisma/accounts-client';\r\n\r\n@Injectable()\r\nexport class PrismaService\r\n  extends PrismaClient<Prisma.PrismaClientOptions, Prisma.LogLevel>\r\n  implements OnModuleInit, OnModuleDestroy\r\n{\r\n  private readonly logger = new Logger(PrismaService.name);\r\n\r\n  constructor() {\r\n    super({\r\n      log: [\r\n        {\r\n          emit: 'event',\r\n          level: 'query',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'error',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'info',\r\n        },\r\n        {\r\n          emit: 'event',\r\n          level: 'warn',\r\n        },\r\n      ],\r\n    });\r\n  }\r\n\r\n  async onModuleInit() {\r\n    await this.$connect();\r\n\r\n    this.$on('error', ({ message }) => {\r\n      this.logger.error(message);\r\n    });\r\n    this.$on('warn', ({ message }) => {\r\n      this.logger.warn(message);\r\n    });\r\n    this.$on('info', ({ message }) => {\r\n      this.logger.debug(message);\r\n    });\r\n    this.$on('query', ({ query, params }) => {\r\n      this.logger.log(`${query}; ${params}`);\r\n    });\r\n  }\r\n\r\n  async onModuleDestroy() {\r\n    await this.$disconnect();\r\n  }\r\n}\r\n","module.exports = require(\"@prisma/accounts-client\");","import { Body, Controller } from '@nestjs/common';\r\nimport { RMQRoute, RMQValidate } from 'nestjs-rmq';\r\nimport { UserService } from './users.service';\r\n\r\n@Controller()\r\nexport class UserCommands {\r\n\tconstructor(private readonly userService: UserService) {}\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { RMQService } from 'nestjs-rmq';\r\nimport { UserEntity } from './entities/user.entity';\r\nimport { UsersRepository } from './repositories/users.repository';\r\nimport { UserEventEmitter} from './users.event-emitter';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\tconstructor(\r\n\t\tprivate readonly usersRepository: UsersRepository,\r\n\t\tprivate readonly rmqService: RMQService,\r\n\t\tprivate readonly usersEventEmmiter: UserEventEmitter\r\n\t) {}\r\n\r\n\tprivate updateUser(user: UserEntity) {\r\n\t\treturn Promise.all([\r\n\t\t\tthis.usersRepository.updateUser(user)\r\n\t\t]);\r\n\t}\r\n}\r\n","import { Injectable, Logger } from '@nestjs/common';\r\nimport { RMQService } from 'nestjs-rmq';\r\nimport { UserEntity } from './entities/user.entity';\r\nimport { IDomainEvent } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { AccountUserCreatedEvent } from '@konstantin-serebryakov-pet-nodejs/contracts';\r\n\r\n@Injectable()\r\nexport class UserEventEmitter {\r\n  constructor(private readonly rmqService: RMQService) {}\r\n\r\n  async emitEvent(event: IDomainEvent) {\r\n    try {\r\n      await this.rmqService.notify(event.topic, event.data);\r\n    } catch (e) {\r\n      if (e instanceof Error) {\r\n        Logger.error(e.message);\r\n      }\r\n    }\r\n  }\r\n\r\n  async emitUserCreated(user: UserEntity) {\r\n    const event: IDomainEvent = {\r\n      topic: AccountUserCreatedEvent.topic,\r\n      data: { userId: user.id } as AccountUserCreatedEvent.Request,\r\n    };\r\n    return this.emitEvent(event);\r\n  }\r\n}\r\n","//\n// accounts\n//\nexport * from './lib/account/account.login';\nexport * from './lib/account/account.register';\nexport * from './lib/account/account.change-user-info';\nexport * from './lib/account/account.query-user-info';\nexport * from './lib/account/account.user-created.event';\n\n//\n// profiles\n//\nexport * from './lib/profile/profile.create';\nexport * from './lib/profile/profile.delete';\nexport * from './lib/profile/profile.change';\nexport * from './lib/profile/profile.query-profile';\nexport * from './lib/profile/profile.change-default';\nexport * from './lib/profile/profile.query-profile-default';\nexport * from './lib/profile/profile.query-user-profiles-ids';\n\nexport * from './lib/profile/nested/profile.change-credential';\nexport * from './lib/profile/nested/profile.change-credential-default';\nexport * from './lib/profile/nested/profile.change-social-media-nodes';\nexport * from './lib/profile/nested/profile.change-social-media-nodes-default';\n","import { IsEmail, IsString } from 'class-validator';\n\nexport namespace AccountLogin {\n\texport const topic = 'account.login.command';\n\n\texport class Request {\n\t\t@IsEmail()\n\t\temail: string;\n\n\t\t@IsString()\n\t\tpassword: string;\n\t}\n\n\texport class Response {\n\t\taccess_token: string;\n\t}\n}\n\n","module.exports = require(\"class-validator\");","import { IsEmail, IsString } from 'class-validator';\n\nexport namespace AccountRegister {\n  export const topic = 'account.register.command';\n\n  export class Request {\n    @IsEmail()\n    email: string;\n\n    @IsString()\n    password: string;\n  }\n\n  export class Response {\n    email: string;\n  }\n}\n","import { IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace AccountChangeUserInfo {\r\n\texport const topic = 'account.change_user_info.command';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tid: string;\r\n\r\n\t\tuser: Pick<IUser, \"isVerified\" | \"passwordHash\">;\r\n\t}\r\n\r\n\texport class Response {}\r\n}\r\n\r\n","import { IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\nimport { IsString } from 'class-validator';\n\nexport namespace AccountQueryUserInfo {\n\texport const topic = 'account.user_info.query';\n\n\texport class Request {\n\t\t@IsString()\n\t\tuserId: string;\n\t}\n\n\texport class Response {\n\t\tuser: Omit<IUser, 'passwordHash'>;\n\t}\n}\n\n","import { IDomainEvent } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsEmail, IsString } from 'class-validator';\r\n\r\nexport namespace AccountUserCreatedEvent {\r\n  export const topic = 'account.user_created.event';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileCreateOne {\r\n  export const topic = 'profile.create_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileDeleteOne {\r\n  export const topic = 'profile.delete_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChange {\r\n  export const topic = 'profile.change_user_profile.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    profile: Omit<IProfile, 'id'>;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id' | 'userId'> {\r\n    id?: string;\r\n    userId: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQuery {\r\n\texport const topic = 'profile.user_profile.query';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tuserId: string;\r\n\r\n    @IsString()\r\n    profileId: string;\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tprofile: IProfile;\r\n\t}\r\n}\r\n\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeDefault {\r\n  export const topic = 'profile.change_user_profile_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    profile: Omit<IProfile, 'id'>;\r\n  }\r\n\r\n  export class Response implements Pick<IProfile, 'id'> {\r\n    id: string;\r\n  }\r\n}\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQueryDefault {\r\n\texport const topic = 'profile.user_profile_default.query';\r\n\r\n\texport class Request {\r\n\t\t@IsString()\r\n\t\tuserId: string;\r\n\t}\r\n\r\n\texport class Response {\r\n\t\tprofile: IProfile;\r\n\t}\r\n}\r\n\r\n","import { IProfile } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileQueryUserProfilesIds {\r\n  export const topic = 'profile.user_profiles_ids.query';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n  }\r\n\r\n  export class Response {\r\n    profileIds: string[];\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeCredential {\r\n  export const topic = 'profile.change_profile_credential.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    @IsString()\r\n    userId: string;\r\n\r\n    credential: Omit<ICredential, 'id' | 'profileId'>;\r\n  }\r\n\r\n  export class Response implements Partial<Pick<ICredential, 'id' | 'profileId'>> {\r\n    id?: string;\r\n    profileId?: string;\r\n  }\r\n}\r\n","import {\r\n  ICredential,\r\n  IProfile,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeCredentialDefault {\r\n  export const topic = 'profile.change_profile_credential_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    credential: Omit<ICredential, 'id' | 'profileId'>;\r\n  }\r\n\r\n  export class Response implements Pick<ICredential, 'id' | 'profileId'> {\r\n    id?: string;\r\n    profileId?: string;\r\n  }\r\n}\r\n","import {\r\n  ISocialMediaNode,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeSocialMediaNodes {\r\n  export const topic = 'profile.change_social_media_nodes.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    profileId: string;\r\n\r\n    @IsString()\r\n    userId: string;\r\n\r\n    socialMediaNodes: Omit<ISocialMediaNode, 'id' | 'profileId'>[];\r\n  }\r\n\r\n  export class Response {\r\n    count: number;\r\n  }\r\n}\r\n","import {\r\n  ISocialMediaNode,\r\n} from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport namespace ProfileChangeSocialMediaNodesDefault {\r\n  export const topic = 'profile.change_social_media_nodes_default.command';\r\n\r\n  export class Request {\r\n    @IsString()\r\n    userId: string;\r\n\r\n    socialMediaNodes: Omit<ISocialMediaNode, 'id' | 'profileId'>[];\r\n  }\r\n\r\n  export class Response {\r\n    count: number;\r\n  }\r\n}\r\n","import { Body, Controller } from '@nestjs/common';\r\nimport { AccountQueryUserInfo } from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { RMQValidate, RMQRoute } from 'nestjs-rmq';\r\nimport { UserEntity } from './entities/user.entity';\r\nimport { UsersRepository } from './repositories/users.repository';\r\nimport { IUser } from '@konstantin-serebryakov-pet-nodejs/interfaces';\r\n\r\n@Controller()\r\nexport class UserQueries {\r\n  constructor(private readonly usersRepository: UsersRepository) {}\r\n\r\n  @RMQValidate()\r\n  @RMQRoute(AccountQueryUserInfo.topic)\r\n  async userInfo(\r\n    @Body() { userId }: AccountQueryUserInfo.Request\r\n  ): Promise<AccountQueryUserInfo.Response> {\r\n    const user = await this.usersRepository.findUserById(userId) as IUser;\r\n    const userPublic = new UserEntity(user).getPublicProfile();\r\n    return {\r\n      user: userPublic,\r\n    };\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { PrismaService } from './prisma.service';\r\n\r\n@Module({\r\n  imports: [],\r\n  controllers: [],\r\n  providers: [PrismaService],\r\n  exports: [PrismaService],\r\n})\r\nexport class PrismaModule {}\r\n","import { Module } from '@nestjs/common';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { getJWTConfig } from '../configs/jwt.config';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { AuthController } from './auth.controller';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Module({\r\n\timports: [UsersModule, JwtModule.registerAsync(getJWTConfig())],\r\n\tcontrollers: [AuthController],\r\n\tproviders: [AuthService],\r\n})\r\nexport class AuthModule {}\r\n","module.exports = require(\"@nestjs/jwt\");","import { JwtModuleAsyncOptions } from '@nestjs/jwt';\r\n\r\nexport const getJWTConfig = (): JwtModuleAsyncOptions => ({\r\n  // imports: [ConfigModule],\r\n  // inject: [ConfigService],\r\n  // useFactory: (configService: ConfigService) => ({\r\n  useFactory: () => ({\r\n    secret: process.env.JWT_SECRET,\r\n    signOptions: {\r\n      expiresIn: process.env.JWT_EXP_H,\r\n    },\r\n  }),\r\n});\r\n","import { Body, Controller, Logger } from '@nestjs/common';\r\nimport { AccountLogin, AccountRegister } from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { Message, RMQMessage, RMQRoute, RMQValidate } from 'nestjs-rmq';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Controller()\r\nexport class AuthController {\r\n\tconstructor(\r\n\t\tprivate readonly authService: AuthService,\r\n\t) {}\r\n\r\n\t@RMQValidate()\r\n\t@RMQRoute(AccountRegister.topic)\r\n\tasync register(dto: AccountRegister.Request): Promise<AccountRegister.Response> {\r\n    const payload = this.authService.register(dto);\r\n    return payload;\r\n\t}\r\n\r\n\t@RMQValidate()\r\n\t@RMQRoute(AccountLogin.topic)\r\n\tasync login(@Body() { email, password }: AccountLogin.Request): Promise<AccountLogin.Response> {\r\n\t\tconst { id } = await this.authService.validateUser(email, password);\r\n\t\treturn this.authService.login(id);\r\n\t}\r\n}\r\n","import { Injectable } from '@nestjs/common';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport { AccountRegister } from '@konstantin-serebryakov-pet-nodejs/contracts';\r\nimport { UserEntity } from '../users/entities/user.entity';\r\nimport { UsersRepository } from '../users/repositories/users.repository';\r\nimport { UserEventEmitter } from '../users/users.event-emitter';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private readonly usersRepository: UsersRepository,\r\n    private readonly usersEventEmitter: UserEventEmitter,\r\n    private readonly jwtService: JwtService\r\n  ) {}\r\n\r\n  async register({ email, password }: AccountRegister.Request) {\r\n    const oldUser = await this.usersRepository.findUser(email);\r\n    if (oldUser) {\r\n      throw new Error('Такой пользователь уже зарегистрирован');\r\n    }\r\n    const newUserEntity = await new UserEntity({\r\n      email: email,\r\n      isVerified: false,\r\n      passwordHash: '',\r\n    }).setPassword(password);\r\n    const newUser = await this.usersRepository.createUser(newUserEntity);\r\n    this.usersEventEmitter.emitUserCreated(newUser);\r\n    return { email: newUser.email };\r\n  }\r\n\r\n  async validateUser(email: string, password: string) {\r\n    const user = await this.usersRepository.findUser(email);\r\n    if (!user) {\r\n      throw new Error('Неверный логин или пароль');\r\n    }\r\n    const userEntity = new UserEntity(user);\r\n    const isCorrectPassword = await userEntity.validatePassword(password);\r\n    if (!isCorrectPassword) {\r\n      throw new Error('Неверный логин или пароль');\r\n    }\r\n    return { id: user.id };\r\n  }\r\n\r\n  async login(id: string) {\r\n    const token = await this.jwtService.signAsync({ id });\r\n    return {\r\n      access_token: token,\r\n    };\r\n  }\r\n}\r\n","import { IRMQServiceAsyncOptions } from 'nestjs-rmq';\r\n\r\nexport const getRMQConfig = (): IRMQServiceAsyncOptions => ({\r\n\t// inject: [ConfigService],\r\n\t// imports: [ConfigModule],\r\n\t// useFactory: (configService: ConfigService) => ({\r\n\tuseFactory: () => ({\r\n\t\texchangeName: process.env.AMQP_EXCHANGE ?? '',\r\n\t\tconnections: [\r\n\t\t\t{\r\n\t\t\t\tlogin: process.env.AMQP_USER ?? '',\r\n\t\t\t\tpassword: process.env.AMQP_PASSWORD ?? '',\r\n\t\t\t\thost: process.env.AMQP_HOSTNAME ?? ''\r\n\t\t\t}\r\n\t\t],\r\n\t\tqueueName: process.env.AMQP_QUEUE,\r\n\t\tprefetchCount: 32,\r\n\t\tserviceName: 'rmq-account'\r\n\t\t// exchangeName: configService.get('AMQP_EXCHANGE') ?? '',\r\n\t\t// connections: [\r\n\t\t// \t{\r\n\t\t// \t\tlogin: configService.get('AMQP_USER') ?? '',\r\n\t\t// \t\tpassword: configService.get('AMQP_PASSWORD') ?? '',\r\n\t\t// \t\thost: configService.get('AMQP_HOSTNAME') ?? ''\r\n\t\t// \t}\r\n\t\t// ],\r\n\t\t// queueName: configService.get('AMQP_QUEUE'),\r\n\t\t// prefetchCount: 32,\r\n\t\t// serviceName: 'rmq-account'\r\n\t})\r\n})\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// import dotenv from 'dotenv'\n// dotenv.config()\nimport 'dotenv/config'\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  console.log(process.env.AMQP_HOSTNAME);\n\tconst app = await NestFactory.create(AppModule);\n\tawait app.init();\n\tLogger.log(\n\t\t`🚀 Accounts microservice is running`\n\t);\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}