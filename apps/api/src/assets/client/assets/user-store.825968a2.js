var l=Object.defineProperty;var E=(t,e,s)=>e in t?l(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var i=(t,e,s)=>(E(t,typeof e!="symbol"?e+"":e,s),s);import{a9 as y,aa as w,u as d,E as m}from"./index.a468aedf.js";import{a as n}from"./axios.b55e1699.js";async function o(t){if(Array.isArray(t))return Promise.all(Array.from(t,async e=>await o(e)));if(t instanceof Date)return new Date(t.getTime());if(t instanceof RegExp)return new RegExp(t);if(t&&typeof t=="object"){const e=Object.create(null),s=[];for(const[a,r]of Object.entries(t))t.hasOwnProperty(a)&&s.push((async()=>{e[a]=await o(r)})());return await Promise.all(s),e}else return t}class S{constructor(e){i(this,"id");i(this,"email");i(this,"isVerified");i(this,"passwordHash");this.id=e.id,this.email=e.email,this.isVerified=e.isVerified,this.passwordHash=e.passwordHash}getPublic(){return{email:this.email,isVerified:this.isVerified}}}class U{static async getUser(e){const s="users/info",a=await this.fetchApiGet(s),r=new S(a);return f.emit(h.GET_USER_SUCCESS,r),r}static async fetchApiGet(e){return await n.get(e).then(a=>{if(a.status===200)return a.data.user;throw new Error(`${a.status}`)})}static async fetchApiPost(e,s){return await n.post(e,s).then(r=>{if(r.status===200||r.status===201)return!0;throw new Error(`${r.status}`)})}static async fetchApiPut(e,s){return await n.put(e,s).then(r=>{if(r.status===200||r.status===201)return!0;throw new Error(`${r.status}`)})}static async fetchApiDelete(e){return await n.delete(e).then(a=>{if(a.status===200||a.status===204)return!0;throw new Error(`${a.status}`)})}}const c="user-store";async function g(t){sessionStorage.setItem(c,JSON.stringify(t))}async function p(){const t=sessionStorage.getItem(c);if(!t)return null;const e=JSON.parse(t);return new S(e)}async function C(){sessionStorage.removeItem(c)}const f=y();var h=(t=>(t.USER_NOT_DEFINED="USER_NOT_DEFINED",t.UPLOAD_USER_SUCCESS="UPLOAD_USER_SUCCESS",t.GET_USER_SUCCESS="GET_USER_SUCCESS",t))(h||{});const _=w("user",{state:()=>({user:null}),getters:{userClone:t=>{const e=t.user;return o(e)}},actions:{async synchronizeByEmail(t,e=!1){this.$state.user&&!e||(await this.synchronizeWithSessionStorage(),!this.$state.user&&await U.getUser(t))},async synchronizeWithSessionStorage(){const t=await p();t?this.$state.user=t:this.$state.user=null},async storeSessionStorage(){const t=this.$state.user;t?g(t):C()}}}),u=_();f.on("GET_USER_SUCCESS",t=>{const e=t;u.$state.user=e,u.storeSessionStorage()});d.on(m.LOGIN_SUCCESS,t=>{const e=t;u.synchronizeByEmail(e.email)});export{_ as u};
